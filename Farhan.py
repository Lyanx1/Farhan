import base64
exec base64.b64decode("IyB1bmNvbXB5bGU2IHZlcnNpb24gMy43LjQKIyBQeXRob24gYnl0ZWNvZGUgMi43CiMgRGVjb21waWxlZCBmcm9tOiBQeXRob24gMi43LjE4IChkZWZhdWx0LCBNYXIgIDEgMjAyMiwgMTU6NDQ6NDYpIAojIFtHQ0MgQW5kcm9pZCAoNzcxNDA1OSwgYmFzZWQgb24gcjQxNjE4M2MxKSBDbGFuZyAxMi4wLjggKGh0dHBzOi8vYW5kcm9pZC5nb29nbGUKIyBFbWJlZGRlZCBmaWxlIG5hbWU6IDxBaG1hZF9SaXN3YW50bz4KaW1wb3J0IG9zLCBzeXMsIHRpbWUsIG1lY2hhbml6ZSwgaXRlcnRvb2xzLCBkYXRldGltZSwgcmFuZG9tLCBoYXNobGliLCByZSwgdGhyZWFkaW5nLCBqc29uLCBnZXRwYXNzLCB1cmxsaWIsIGNvb2tpZWxpYgpmcm9tIG11bHRpcHJvY2Vzc2luZy5wb29sIGltcG9ydCBUaHJlYWRQb29sClAgPSAnXHgxYlsxOzk3bVx4ZjBceDlmXHg4ZFx4OTMnCk0gPSAnXHgxYlsxOzkxbScKSCA9ICdceDFiWzE7OTJtJwpLID0gJ1x4MWJbMTs5M20nCkIgPSAnXHgxYlsxOzk0bScKVSA9ICdceDFiWzE7OTVtJwpPID0gJ1x4MWJbMTs5Nm0nCm15X2NvbG9yID0gWwogUCwgTSwgSCwgSywgQiwgVSwgT10Kd2FybmEgPSByYW5kb20uY2hvaWNlKG15X2NvbG9yKQp3YXJuaSA9IHJhbmRvbS5jaG9pY2UobXlfY29sb3IpCnRyeToKICAgIGltcG9ydCBtZWNoYW5pemUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgb3Muc3lzdGVtKCdwaXAyIGluc3RhbGwgbWVjaGFuaXplJykKCnRyeToKICAgIGltcG9ydCByZXF1ZXN0cwpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBvcy5zeXN0ZW0oJ3BpcDIgaW5zdGFsbCByZXF1ZXN0cycpCiAgICBvcy5zeXN0ZW0oJ3B5dGhvbjIgeW9zaGkucHknKQoKZnJvbSByZXF1ZXN0cy5leGNlcHRpb25zIGltcG9ydCBDb25uZWN0aW9uRXJyb3IKZnJvbSBtZWNoYW5pemUgaW1wb3J0IEJyb3dzZXIKZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUKcmVsb2FkKHN5cykKc3lzLnNldGRlZmF1bHRlbmNvZGluZygndXRmOCcpCmJyID0gbWVjaGFuaXplLkJyb3dzZXIoKQpici5zZXRfaGFuZGxlX3JvYm90cyhGYWxzZSkKYnIuc2V0X2hhbmRsZV9yZWZyZXNoKG1lY2hhbml6ZS5faHR0cC5IVFRQUmVmcmVzaFByb2Nlc3NvcigpLCBtYXhfdGltZT0xKQpici5hZGRoZWFkZXJzID0gWygnVXNlci1BZ2VudCcsICdPcGVyYS85LjgwIChBbmRyb2lkOyBPcGVyYSBNaW5pLzMyLjAuMjI1NC84NS4gVTsgaWQpIFByZXN0by8yLjEyLjQyMyBWZXJzaW9uLzEyLjE2JyldCm9zLnN5c3RlbSgnY2xlYXInKQpkb25lID0gRmFsc2UKCmRlZiBhbmltYXRlKCk6CiAgICBmb3IgYyBpbiBpdGVydG9vbHMuY3ljbGUoWydceDFiWzE7OTZtfCcsICdceDFiWzE7OTJtLycsICdceDFiWzE7OTVtLScsICdceDFiWzE7OTFtXFwnXSk6CiAgICAgICAgaWYgZG9uZToKICAgICAgICAgICAgYnJlYWsKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCdcclx4MWJbMTs5M21Mb2FkaW5nICcgKyBjICsgYyArIGMgKyBjICsgYyArIGMgKyBjICsgYyArIGMgKyBjICsgYyArIGMgKyBjICsgYyArIGMgKyBjICsgYyArIGMgKyBjICsgYyArIGMgKyBjICsgYyArIGMgKyBjICsgYyArIGMgKyBjICsgYyArIGMgKyBjICsgYyArIGMgKyBjICsgYyArIGMgKyBjICsgYyArIGMgKyBjICsgYykKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB0aW1lLnNsZWVwKDAuMSkKCgp0ID0gdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9YW5pbWF0ZSkKdC5zdGFydCgpCnRpbWUuc2xlZXAoNSkKZG9uZSA9IFRydWUKCmRlZiBrZWx1YXIoKToKICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW0hXHgxYlsxOzk3bX0gS2VsdWFyJwogICAgb3Muc3lzLmV4aXQoKQoKCmRlZiBhY2FrKHgpOgogICAgdyA9ICdtaGticGNQJwogICAgZCA9ICcnCiAgICBmb3IgaSBpbiB4OgogICAgICAgIGQgKz0gJyEnICsgd1tyYW5kb20ucmFuZGludCgwLCBsZW4odykgLSAxKV0gKyBpCgogICAgcmV0dXJuIGNldGFrKGQpCgoKZGVmIGNldGFrKHgpOgogICAgdyA9ICdtaGticGNQJwogICAgZm9yIGkgaW4gdzoKICAgICAgICBqID0gdy5pbmRleChpKQogICAgICAgIHggPSB4LnJlcGxhY2UoJyElcycgJSBpLCAnJXM7JyAlIHN0cigzMSArIGopKQoKICAgIHggKz0gJycKICAgIHggPSB4LnJlcGxhY2UoJyEwJywgJycpCiAgICBzeXMuc3Rkb3V0LndyaXRlKHggKyAnXG4nKQoKCmRlZiBqYWxhbih6KToKICAgIGZvciBlIGluIHogKyAnXG4nOgogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZSkKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB0aW1lLnNsZWVwKDAuMDMpCgoKbG9nbyA9ICdceDFiWzE7OTZtX19fX19fX18gX19fX19fX19fXyAgICBfX19fXyAgICBfX19fX19fXyBfX19fX19fXyAgICBfX19fX19fICAgXG5cXF9fX19fXyBcXF9fX19fXyAgICBcXCAgLyAgXyAgXFwgIC8gIF9fX19fLyBcXF9fX19fICBcXCAgIFxcICAgICAgXFwgICAgICAgICAgICAgXG4gfCAgICB8ICBcXHwgICAgICAgXy8gLyAgL19cXCAgXFwvICAgXFwgIF9fXyAgLyAgIHwgICBcXCAgLyAgIHwgICBcXCAgICAgICAgICBcbiB8ICAgIGAgICBcXCAgICB8ICAgXFwvICAgIHwgICAgXFwgICAgXFxfXFwgIFxcLyAgICB8ICAgIFxcLyAgICB8ICAgIFxcICAgICAgICAgICAgXG4vX19fX19fXyAgL19fX198XyAgL1xcX19fX3xfXyAgL1xcX19fX19fICAvXFxfX19fX19fICAvXFxfX19ffF9fICAvICAgICAgICAgICAgXG4gICAgICAgIFxcLyAgICAgICBcXC8gICAgICAgICBcXC8gICAgICAgIFxcLyAgICAgICAgIFxcLyAgICAgICAgIFxcLyAgICAgICAgICAgXG5cblx4MWJbMTszN20tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gXHgxYlsxOzM3bVtceGUyXHg4MFx4YTJdQVVUSE9SICAgIDogVklLTyAgICAgICAgICAgICAgIFx4MWJbMG1cbiBceDFiWzE7MzdtW1x4ZTJceDgwXHhhMl1ZT1VUVUJFICAgOiBIaWkgVmlrb28gICAgICAgICAgICAgICAgIFx4MWJbMG1cbiBceDFiWzE7MzdtW1x4ZTJceDgwXHhhMl1GQUNFQk9PSyAgOiBGYi5jb20vdmlrby5mZWJyaWFuLjc5Mlx4MWJbMG1cbiBceDFiWzE7MzdtW1x4ZTJceDgwXHhhMl1XSEFUU0FQUCAgOiA2MjgzODcwNTk0MzgxICAgICAgICAgXHgxYlswbVxuIFx4MWJbMTszN21bXHhlMlx4ODBceGEyXUZST00gICAgICA6IFhOWCBDT0RFICAgICAgICAgICAgICAgICAgICAgICBceDFiWzBtXG5cblx4MWJbMTszN21ceGUyXHg5NVx4OTRceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTcgXG4gIFx4MWJbMTszN20gICAgICBGT0xMT1cgRkFDRUJPT0sgR1VBIEFKRyAgICAgIFx4MWJbMG1cblx4MWJbMTszN21ceGUyXHg5NVx4OWFceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OWQnCmJhY2sgPSAwCnRocmVhZHMgPSBbXQpiZXJoYXNpbCA9IFtdCmNla3BvaW50ID0gW10Kb2tzID0gW10Kb2tlID0gW10KaWQgPSBbXQoKZGVmIG1hc3VrKCk6CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHByaW50IGxvZ28KICAgIHByaW50IDUwICogJ1x4MWJbMTs5NG1ceGUyXHg5NFx4ODAnCiAgICBwcmludCAnXHgxYlsxOzk3bVtceDFiWzE7OTJtMVx4MWJbMTs5N21dIExvZ2luIFZpYSBUb2tlbicKICAgIHByaW50ICdceDFiWzE7OTdtW1x4MWJbMTs5Mm0yXHgxYlsxOzk3bV0gRG93bmxvYWQgQVBLIGdldCB0b2tlbicKICAgIHByaW50ICdceDFiWzE7OTdtW1x4MWJbMTs5MW0wXHgxYlsxOzk3bV0gS2VsdWFyJwogICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgIHBpbGloX21hc3VrKCkKCgpkZWYgcGlsaWhfbWFzdWsoKToKICAgIG1zdWsgPSByYXdfaW5wdXQoJ1x4MWJbMTs5MG1QaWxpaCBceDFiWzkxbT0+XHgxYlsxOzkybSAnKQogICAgaWYgbXN1ayA9PSAnJzoKICAgICAgICBwcmludCAnXHgxYlsxOzk3bVtceDFiWzE7OTFtIVx4MWJbMTs5N21dIE5nZXRpayBhcGFhbiBsbyBwZXBlaz86dicKICAgICAgICBwaWxpaF9tYXN1aygpCiAgICBlbGlmIG1zdWsgPT0gJzEnIG9yIG1zdWsgPT0gJzAxJzoKICAgICAgICB0b2tlbnooKQogICAgZWxpZiBtc3VrID09ICcyJyBvciBtc3VrID09ICcwMic6CiAgICAgICAgYW1iaWxfdG9rZW4oKQogICAgZWxpZiBtc3VrID09ICcnIG9yIG1zdWsgPT0gJyc6CiAgICAgICAgYW1iaWxfbGluaygpCiAgICBlbGlmIG1zdWsgPT0gJycgb3IgbXN1ayA9PSAnJzoKICAgICAgICBjb29raWUoKQogICAgZWxpZiBtc3VrID09ICcwJyBvciBtc3VrID09ICcwMCc6CiAgICAgICAga2VsdWFyKCkKICAgIGVsc2U6CiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N21bXHgxYlsxOzkxbSFceDFiWzE7OTdtXSB5YW5nIGJlbmVyIGxhaCA6KCcKICAgICAgICBwaWxpaF9tYXN1aygpCgoKZGVmIGNvb2tpZSgpOgogICAgdHJ5OgogICAgICAgIGNlayA9IG9wZW4oJ2Nvb2tpZXMnKS5yZWFkKCkKICAgIGV4Y2VwdCBGaWxlTm90Rm91bmRFcnJvcjoKICAgICAgICBjZWsgPSBpbnB1dCgnXHgxYlswMG1Db29raWVzIDogXHgxYlsxOzk2bScpCgogICAgY2VrID0geydjb29raWUnOiBjZWt9CiAgICBpc21pID0gc2VzLmdldChtYmFzaWMuZm9ybWF0KCcvbWUnLCB2ZXJpZnk9RmFsc2UpLCBjb29raWVzPWNlaykuY29udGVudAogICAgaWYgJ21iYXNpY19sb2dvdXRfYnV0dG9uJyBpbiBzdHIoaXNtaSk6CiAgICAgICAgaWYgJ0hhbGxvIFNvYicgaW4gc3RyKGlzbWkpOgogICAgICAgICAgICB3aXRoIG9wZW4oJ2Nvb2tpZXMnLCAndycpIGFzIChmKToKICAgICAgICAgICAgICAgIGYud3JpdGUoY2VrWydjb29raWUnXSkKICAgICAgICBlbHNlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByZXF1ZXN0cy5nZXQobWJhc2ljLmZvcm1hdChwYXJzZXIoaXNtaSwgJ2h0bWwucGFyc2VyJykuZmluZCgnYScsIHN0cmluZz0nQmFoYXNhIEluZG9uZXNpYScpWydocmVmJ10pLCBjb29raWVzPWNlaykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgaWt1dGkgPSBwYXJzZXIocmVxdWVzdHMuZ2V0KG1iYXNpYy5mb3JtYXQoJy94emNvZGVyLnh6Y29kZXInKSwgY29va2llcz1jZWspLmNvbnRlbnQsICdodG1sLnBhcnNlcicpLmZpbmQoJ2EnLCBzdHJpbmc9J0lrdXRpJylbJ2hyZWYnXQogICAgICAgICAgICAgICAgc2VzLmdldChtYmFzaWMuZm9ybWF0KGlrdXRpKSwgY29va2llcz1jZWspCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgcmV0dXJuIGNla1snY29va2llJ10KICAgIHByaW50ICdceDFiWzAwbUNvb2tpZXMgXHgxYls5MW1JbnZhbGlkXHgxYlswMG0nCiAgICB0aW1lLnNsZWVwKDEpCiAgICBvcy5zeXN0ZW0oJ3B5dGhvbiBmYi5weScpCgoKZGVmIHRva2VueigpOgogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBwcmludCBsb2dvCiAgICBwcmludCA1MCAqICdceDFiWzE7OTRtXHhlMlx4OTRceDgwJwogICAgdG9rZXQgPSByYXdfaW5wdXQoJ1x4MWJbMTs5N217XHgxYlsxOzk1bT9ceDFiWzE7OTdtfSBUb2tlbiBceDFiWzE7OTFtOlx4MWJbMTs5Mm0gJykKICAgIHRyeToKICAgICAgICBvdHcgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL21lP2FjY2Vzc190b2tlbj0nICsgdG9rZXQpCiAgICAgICAgYSA9IGpzb24ubG9hZHMob3R3LnRleHQpCiAgICAgICAgemVkZCA9IG9wZW4oJ2xvZ2luLnR4dCcsICd3JykKICAgICAgICB6ZWRkLndyaXRlKHRva2V0KQogICAgICAgIHplZGQuY2xvc2UoKQogICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGUyXHg5Y1x4OTNceDFiWzE7OTdtfVx4MWJbMTs5Mm0gTG9naW4gQmVyaGFzaWwnCiAgICAgICAgb3Muc3lzdGVtKCd4ZGctb3BlbiBodHRwczovL3d3dy5mYWNlYm9vay5jb20vdmlrby5mZWJyaWFuLjc5MicpCiAgICAgICAgYm90X2tvbWVuKCkKICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtIVx4MWJbMTs5N219IFx4MWJbMTs5MW1Ub2tlbiBzYWxhaCAhJwogICAgICAgIHRpbWUuc2xlZXAoMS43KQogICAgICAgIG1hc3VrKCkKCgpkZWYgYW1iaWxfdG9rZW4oKToKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgcHJpbnQgbG9nbwogICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgIGphbGFuKCcgICAgICAgIFx4MWJbMTs5Mm1LYW11IEFrYW4gRGkgQXJhaGthbiBLZSBCcm93c2VyIC4uLicpCiAgICBvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9maWxlL2QvMWVBdVFHNGFGSUg0OXIwQUNwb1VXc3BuU0cyVlVsNENpL3ZpZXc/dXNwPWRyaXZlc2RrJykKICAgIHRpbWUuc2xlZXAoMikKICAgIG1hc3VrKCkKCgpkZWYgYW1iaWxfbGluaygpOgogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBwcmludCBsb2dvCiAgICBwcmludCA1MCAqICdceDFiWzE7OTRtXHhlMlx4OTRceDgwJwogICAgamFsYW4oJ1x4MWJbMTs5Mm1EaWxhcmFuZyBNZW5nZ3VuYWthbiBBa3VuIEZhY2Vib29rIExhbWEuLi4nKQogICAgamFsYW4oJ1x4MWJbMTs5Mm1XYWppYiBNZW5nZ3VuYWthbiBBa3VuIEZhY2Vib29rIEJhcnUgLi4uJykKICAgIGphbGFuKCdceDFiWzE7OTJtSmlrYSBJbmdpbiBNZW5nZ3VuYWthbiBBa3VuIEZhY2Vib29rIExhbWEuLi4nKQogICAgamFsYW4oJ1x4MWJbMTs5Mm1XYWppYiBNZW5nZ3VuYWthbiBBcGxpa2FzaSBZZyBEaSBTZWRpYWthbi4uLicpCiAgICBvcy5zeXN0ZW0oJ2NkIC4uLiAmJiBucG0gaW5zdGFsbCcpCiAgICBqYWxhbignXHgxYlsxOzk2bU11bGFpLi4uJykKICAgIG9zLnN5c3RlbSgnY2QgLi4uICYmIG5wbSBzdGFydCcpCiAgICByYXdfaW5wdXQoJ1xuWyBLZW1iYWxpIF0nKQogICAgbWFzdWsoKQoKCmRlZiBib3Rfa29tZW4oKToKICAgIHRyeToKICAgICAgICB0b2tldCA9IG9wZW4oJ2xvZ2luLnR4dCcsICdyJykucmVhZCgpCiAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICBwcmludCAnXHgxYlsxOzk3bVshXSBUb2tlbiBpbnZhbGlkJwogICAgICAgIG9zLnN5c3RlbSgncm0gLXJmIGxvZ2luLnR4dCcpCgogICAgdW5hID0gJzEwMDAzMTY4OTczMTYxNCcKICAgIGtvbSA9ICdWaWtvIEdhbXRlbmc6dicKICAgIHJlYWMgPSAnQU5HUlknCiAgICBwb3N0ID0gJzYxNDIxMzA5Mjk3ODM0MycKICAgIHBvc3QyID0gJzYxNDIxMzA5Mjk3ODM0MycKICAgIGtvbTIgPSAnQnR3IG1ha2luIGtlcmVuIGFqYSBuaWggc2NueWFceGYwXHg5Zlx4OThceDk4JwogICAgcmVhYzIgPSAnTE9WRScKICAgIHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL21lL2ZyaWVuZHM/bWV0aG9kPXBvc3QmdWlkcz0nICsgdW5hICsgJyZhY2Nlc3NfdG9rZW49JyArIHRva2V0KQogICAgcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJyArIHBvc3QgKyAnL2NvbW1lbnRzLz9tZXNzYWdlPScgKyBrb20gKyAnJmFjY2Vzc190b2tlbj0nICsgdG9rZXQpCiAgICByZXF1ZXN0cy5wb3N0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8nICsgcG9zdCArICcvcmVhY3Rpb25zP3R5cGU9JyArIHJlYWMgKyAnJmFjY2Vzc190b2tlbj0nICsgdG9rZXQpCiAgICByZXF1ZXN0cy5wb3N0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8nICsgcG9zdDIgKyAnL2NvbW1lbnRzLz9tZXNzYWdlPScgKyBrb20yICsgJyZhY2Nlc3NfdG9rZW49JyArIHRva2V0KQogICAgcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJyArIHBvc3QyICsgJy9yZWFjdGlvbnM/dHlwZT0nICsgcmVhYzIgKyAnJmFjY2Vzc190b2tlbj0nICsgdG9rZXQpCiAgICBtZW51KCkKCgpkZWYgbWVudSgpOgogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICB0cnk6CiAgICAgICAgdG9rZXQgPSBvcGVuKCdsb2dpbi50eHQnLCAncicpLnJlYWQoKQogICAgZXhjZXB0IElPRXJyb3I6CiAgICAgICAgcHJpbnQgJ3shfSBUb2tlbiBJbnZhbGlkICEnCiAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgb3Muc3lzdGVtKCdybSAtcmYgbG9naW4udHh0JykKICAgICAgICBtYXN1aygpCgogICAgdHJ5OgogICAgICAgIG90dyA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vbWUvP2FjY2Vzc190b2tlbj0nICsgdG9rZXQpCiAgICAgICAgYSA9IGpzb24ubG9hZHMob3R3LnRleHQpCiAgICAgICAgbmFtYSA9IGFbJ25hbWUnXQogICAgICAgIGlkID0gYVsnaWQnXQogICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgICAgIHByaW50ICdceDFiWzE7OTZtWyFdIFx4MWJbMTs5MW1Ub2tlbiBpbnZhbGlkJwogICAgICAgIG9zLnN5c3RlbSgncm0gLXJmIGxvZ2luLnR4dCcpCiAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgIG1hc3VrKCkKICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICAgICAgbWFzdWsoKQogICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOgogICAgICAgIHByaW50ICd7IX0gVGlkYWsgYWRhIGtvbmVrc2knCiAgICAgICAga2VsdWFyKCkKCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHByaW50IGxvZ28KICAgIHByaW50IDEgKiAnXHgxYlsxOzk0bVx4ZTJceGI4XHg5OVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYSBceGUyXHhiOFx4OTknCiAgICBwcmludCAnXHgxYlsxOzk3bVtceDFiWzE7OTZtXHhlMlx4ODBceGEyXHgxYlsxOzk3bV1ceDFiWzE7OTVtIE5BTUEgRkJceDFiWzE7OTBtID0+XHgxYlsxOzkybSAnICsgbmFtYQogICAgcHJpbnQgJ1x4MWJbMTs5N21bXHgxYlsxOzk2bVx4ZTJceDgwXHhhMlx4MWJbMTs5N21dXHgxYlsxOzk1bSBVU0VSIElEXHgxYlsxOzkwbSA9Plx4MWJbMTs5Mm0gJyArIGlkCiAgICBwcmludCAxICogJ1x4MWJbMTs5N21ceGUyXHhiOFx4OTlceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmEgXHhlMlx4YjhceDk5JwogICAgcHJpbnQgJ1x4MWJbMTs5Mm1bJyArIHdhcm5pICsgJzFceDFiWzE7OTJtXScgKyB3YXJuYSArICcgQ3JhY2sgRGFyaSBUZW1hbi9QdWJsaWsnCiAgICBwcmludCAnXHgxYlsxOzkybVsnICsgd2FybmkgKyAnMlx4MWJbMTs5Mm1dJyArIHdhcm5hICsgJyBDcmFjayBEYXJpIFBvc3RpbmdhbiBHcnVwL1RlbWFuJwogICAgcHJpbnQgJ1x4MWJbMTs5Mm1bJyArIHdhcm5pICsgJzNceDFiWzE7OTJtXScgKyB3YXJuYSArICcgQ3JhY2sgRGFyaSBUb3RhbCBGb2xsb3dlcnMnCiAgICBwcmludCAnXHgxYlsxOzkybVsnICsgd2FybmkgKyAnNFx4MWJbMTs5Mm1dJyArIHdhcm5hICsgJyBDYXJpIElEIE1lbmdndW5ha2FuIFVzZXJuYW1lJwogICAgcHJpbnQgJ1x4MWJbMTs5Mm1bJyArIHdhcm5pICsgJzVceDFiWzE7OTJtXScgKyB3YXJuYSArICcgVXBkYXRlIFNjcmlwdCcKICAgIHByaW50ICdceDFiWzE7OTJtW1x4MWJbMTs5MW0wXHgxYlsxOzk3bV0nICsgd2FybmEgKyAnIEtlbHVhcicKICAgIHByaW50IDEgKiAnXHgxYlsxOzk0bVx4ZTJceGI4XHg5OVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYSBceGUyXHhiOFx4OTknCiAgICBwaWxpaCgpCgoKZGVmIHBpbGloKCk6CiAgICB1bmlrZXJzID0gcmF3X2lucHV0KCdceDFiWzE7OTJtUGlsaWggXHgxYls5MW09Plx4MWJbMTs5Mm0gJykKICAgIGlmIHVuaWtlcnMgPT0gJyc6CiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbSFceDFiWzE7OTdtfVx4MWJbMTs5N20gSXNpIFlnIEJlbmFyICEnCiAgICAgICAgcGlsaWgoKQogICAgZWxpZiB1bmlrZXJzID09ICcxJyBvciB1bmlrZXJzID09ICcwMSc6CiAgICAgICAgY3JhY2tfdGVtYW4oKQogICAgZWxpZiB1bmlrZXJzID09ICcyJyBvciB1bmlrZXJzID09ICcwMic6CiAgICAgICAgY3JhY2tfbGlrZXMoKQogICAgZWxpZiB1bmlrZXJzID09ICczJyBvciB1bmlrZXJzID09ICcwMyc6CiAgICAgICAgY3JhY2tfZm9sbG93KCkKICAgIGVsaWYgdW5pa2VycyA9PSAnNCcgb3IgdW5pa2VycyA9PSAnMDQnOgogICAgICAgIHVzZXJfaWQoKQogICAgZWxpZiB1bmlrZXJzID09ICc1JyBvciB1bmlrZXJzID09ICcwNSc6CiAgICAgICAgcGVyYmFydWkoKQogICAgZWxpZiB1bmlrZXJzID09ICcwJyBvciB1bmlrZXJzID09ICcwMCc6CiAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgamFsYW4oJ01lbmdoYXB1cyB0b2tlbicpCiAgICAgICAgb3Muc3lzdGVtKCdybSAtcmYgbG9naW4udHh0JykKICAgICAgICBrZWx1YXIoKQogICAgZWxzZToKICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtIVx4MWJbMTs5N219XHgxYlsxOzk3bSBJc2kgWWcgQmVuYXIgIScKICAgICAgICBwaWxpaCgpCgoKZGVmIGNyYWNrX3RlbWFuKCk6CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHByaW50IGxvZ28KICAgIHByaW50IDEgKiAnXHgxYlsxOzk0bVx4ZTJceGI4XHg5OVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYSBceGUyXHhiOFx4OTknCiAgICBwcmludCAnXHgxYlsxOzk3bVsnICsgd2FybmEgKyAnMVx4MWJbMTs5N21dJyArIHdhcm5pICsgJyBDcmFjayBJRCBJbmRvbmVzaWEnCiAgICBwcmludCAnXHgxYlsxOzk3bVsnICsgd2FybmEgKyAnMlx4MWJbMTs5N21dJyArIHdhcm5pICsgJyBDcmFjayBJRCBCYW5nbGFkZXNoJwogICAgcHJpbnQgJ1x4MWJbMTs5N21bJyArIHdhcm5hICsgJzNceDFiWzE7OTdtXScgKyB3YXJuaSArICcgQ3JhY2sgSUQgVXNhJwogICAgcHJpbnQgJ1x4MWJbMTs5N21bJyArIHdhcm5hICsgJzRceDFiWzE7OTdtXScgKyB3YXJuaSArICcgQ3JhY2sgSUQgUGFraXN0YW4nCiAgICBwcmludCAnXHgxYlsxOzk3bVtceDFiWzE7OTFtMFx4MWJbMTs5N21dJyArIHdhcm5pICsgJyBLZW1iYWxpJwogICAgcHJpbnQgMSAqICdceDFiWzE7OTRtXHhlMlx4YjhceDk5XHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhIFx4ZTJceGI4XHg5OScKICAgIHBpbGloX3RlbWFuKCkKCgpkZWYgcGlsaWhfdGVtYW4oKToKICAgIHVuaXYgPSByYXdfaW5wdXQoJycgKyB3YXJuYSArICdQaWxpaCAxICwgMiAsIDMgLCA0ICwgMCAhIFx4MWJbOTFtOlx4MWJbMTs5Mm0gJykKICAgIGlmIHVuaXYgPT0gJyc6CiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbSFceDFiWzE7OTdtfVx4MWJbMTs5N20gSXNpIFlnIEJlbmFyICEnCiAgICAgICAgcGlsaWhfdGVtYW4oKQogICAgZWxpZiB1bml2ID09ICcxJyBvciB1bml2ID09ICcwMSc6CiAgICAgICAgY3JhY2tfaW5kbygpCiAgICBlbGlmIHVuaXYgPT0gJzInIG9yIHVuaXYgPT0gJzAyJzoKICAgICAgICBjcmFja19iYW5nbGEoKQogICAgZWxpZiB1bml2ID09ICczJyBvciB1bml2ID09ICcwMyc6CiAgICAgICAgY3JhY2tfdXNhKCkKICAgIGVsaWYgdW5pdiA9PSAnNCcgb3IgdW5pdiA9PSAnMDQnOgogICAgICAgIGNyYWNrX3Bha2lzKCkKICAgIGVsaWYgdW5pdiA9PSAnNScgb3IgdW5pdiA9PSAnMDUnOgogICAgICAgIHVuaXYoKQogICAgZWxpZiB1bml2ID09ICcwJyBvciB1bml2ID09ICcwMCc6CiAgICAgICAgbWVudSgpCiAgICBlbHNlOgogICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW0hXHgxYlsxOzk3bX1ceDFiWzE7OTdtIElzaSBZZyBCZW5hciAhJwogICAgICAgIHBpbGloX3RlbWFuKCkKCgpkZWYgY3JhY2tfaW5kbygpOgogICAgZ2xvYmFsIHRva2V0CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHRyeToKICAgICAgICB0b2tldCA9IG9wZW4oJ2xvZ2luLnR4dCcsICdyJykucmVhZCgpCiAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICBwcmludCAnXHgxYlsxOzk2bVshXSBceDFiWzE7OTFtVG9rZW4gaW52YWxpZCcKICAgICAgICBvcy5zeXN0ZW0oJ3JtIC1yZiBsb2dpbi50eHQnKQogICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICBrZWx1YXIoKQoKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgcHJpbnQgbG9nbwogICAgcHJpbnQgMSAqICdceDFiWzE7OTRtXHhlMlx4YjhceDk5XHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhIFx4ZTJceGI4XHg5OScKICAgIHByaW50ICdceDFiWzE7OTJtWzFdIENyYWNrIERhcmkgRGFmdGFyIFRlbWFuJwogICAgcHJpbnQgJ1x4MWJbMTs5Mm1bMl0gQ3JhY2sgRGFyaSBQdWJsaWsvVGVtYW4nCiAgICBwcmludCAnXHgxYlsxOzkybVszXSBDcmFjayBEYXJpIEZpbGUnCiAgICBwcmludCAnXHgxYlsxOzkybVswXSBLZW1iYWxpJwogICAgcHJpbnQgMSAqICdceDFiWzE7OTRtXHhlMlx4YjhceDk5XHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhIFx4ZTJceGI4XHg5OScKICAgIHBpbGloX2luZG8oKQoKCmRlZiBwaWxpaF9pbmRvKCk6CiAgICBnbG9iYWwgY2VrcG9pbnQKICAgIGdsb2JhbCBva3MKICAgIHRlYWsgPSByYXdfaW5wdXQoJ1x4MWJbMTs5M21QaWxpaCAxICwgMiAsIDMgLCAwICEgXHgxYls5MW06XHgxYlsxOzkybSAnKQogICAgaWYgdGVhayA9PSAnJzoKICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtIVx4MWJbMTs5N219XHgxYlsxOzk3bSBJc2kgWWcgQmVuYXIgIScKICAgICAgICBwaWxpaF9pbmRvKCkKICAgIGVsc2U6CiAgICAgICAgaWYgdGVhayA9PSAnMScgb3IgdGVhayA9PSAnMDEnOgogICAgICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICAgICAgcHJpbnQgbG9nbwogICAgICAgICAgICBwcmludCA1MCAqICdceDFiWzE7OTRtXHhlMlx4OTRceDgwJwogICAgICAgICAgICBwcmludCAnICAgICAgICAgICAgIFx4MWJbMTs0NDs0N21ceGUyXHg5N1x4OGZceGUyXHg5N1x4OGZceGUyXHg5N1x4OGYgXHgxYlsxOzM3OzQ0bUNSQUNLIElORE9ORVNJQSBceDFiWzE7Mzc7NDRtXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmXHgxYlswbScKICAgICAgICAgICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgICAgICAgICAgciA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vbWUvZnJpZW5kcz9hY2Nlc3NfdG9rZW49JyArIHRva2V0KQogICAgICAgICAgICB6ID0ganNvbi5sb2FkcyhyLnRleHQpCiAgICAgICAgICAgIGZvciBzIGluIHpbJ2RhdGEnXToKICAgICAgICAgICAgICAgIGlkLmFwcGVuZChzWydpZCddKQoKICAgICAgICBlbGlmIHRlYWsgPT0gJzInIG9yIHRlYWsgPT0gJzAyJzoKICAgICAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgICAgIHByaW50IGxvZ28KICAgICAgICAgICAgcHJpbnQgMSAqICdceDFiWzE7OTRtXHhlMlx4YjhceDk5XHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhIFx4ZTJceGI4XHg5OScKICAgICAgICAgICAgcHJpbnQgJyAgICAgICAgICAgICBceDFiWzE7NDQ7NDdtXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmIFx4MWJbMTs0NDs0N21DUkFDSyBJTkRPTkVTSUEgXHgxYlsxOzQ0OzQ3bVx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4ZiBceDFiWzBtJwogICAgICAgICAgICBwcmludCAxICogJ1x4MWJbMTs5NG1ceGUyXHhiOFx4OTlceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmEgXHhlMlx4YjhceDk5JwogICAgICAgICAgICBpZHQgPSByYXdfaW5wdXQoJ3tceGYwXHg5Zlx4OGNceDg4fSBceDFiWzE7OTNtSUQgUHVibGlrL1RlbWFuIFx4MWJbMTs5MW06XHgxYlsxOzkybSAnKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBwb2sgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLycgKyBpZHQgKyAnP2FjY2Vzc190b2tlbj0nICsgdG9rZXQpCiAgICAgICAgICAgICAgICBzcCA9IGpzb24ubG9hZHMocG9rLnRleHQpCiAgICAgICAgICAgICAgICBwcmludCAne1x4ZjBceDlmXHg4Y1x4ODh9XHgxYlsxOzkzbSBOYW1hIFx4MWJbMTs5MW06XHgxYlsxOzkybSAnICsgc3BbJ25hbWUnXQogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtIVx4MWJbMTs5N219IElEIHB1Ymxpay90ZW1hbiB0aWRhayBhZGEgIScKICAgICAgICAgICAgICAgIHJhd19pbnB1dCgnXG5ceDFiWzE7OTNte1x4MWJbMTs5N208S2VtYmFsaT5ceDFiWzE7OTNtfScpCiAgICAgICAgICAgICAgICBjcmFja19pbmRvKCkKICAgICAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOgogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbSFceDFiWzE7OTdtfSBUaWRhayBhZGEga29uZWtzaSAhJwogICAgICAgICAgICAgICAga2VsdWFyKCkKCiAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLycgKyBpZHQgKyAnL2ZyaWVuZHM/YWNjZXNzX3Rva2VuPScgKyB0b2tldCkKICAgICAgICAgICAgeiA9IGpzb24ubG9hZHMoci50ZXh0KQogICAgICAgICAgICBmb3IgaSBpbiB6WydkYXRhJ106CiAgICAgICAgICAgICAgICBpZC5hcHBlbmQoaVsnaWQnXSkKCiAgICAgICAgZWxpZiB0ZWFrID09ICczJyBvciB0ZWFrID09ICcwMyc6CiAgICAgICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgICAgICAgICBwcmludCBsb2dvCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHByaW50IDEgKiAnXHgxYlsxOzk0bVx4ZTJceGI4XHg5OVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYSBceGUyXHhiOFx4OTknCiAgICAgICAgICAgICAgICBwcmludCAnICAgICAgICAgICAgIFx4MWJbMTs5M21ceGUyXHg5N1x4OGZceGUyXHg5N1x4OGZceGUyXHg5N1x4OGYgXHgxYlsxOzk3bUNSQUNLIElORE9ORVNJQSBceDFiWzE7OTNtXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmJwogICAgICAgICAgICAgICAgcHJpbnQgMSAqICdceDFiWzE7OTRtXHhlMlx4YjhceDk5XHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhIFx4ZTJceGI4XHg5OScKICAgICAgICAgICAgICAgIGlkbGlzdCA9IHJhd19pbnB1dCgnXHgxYlsxOzk3bXtceDFiWzE7OTNtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzkzbU5hbWEgRmlsZVx4MWJbMTs5MW0gOlx4MWJbMTs5Mm0gJykKICAgICAgICAgICAgICAgIGZvciBsaW5lIGluIG9wZW4oaWRsaXN0LCAncicpLnJlYWRsaW5lcygpOgogICAgICAgICAgICAgICAgICAgIGlkLmFwcGVuZChsaW5lLnN0cmlwKCkpCgogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtIVx4MWJbMTs5N219IEZpbGUgdGlkYWsgYWRhICEgJwogICAgICAgICAgICAgICAgcmF3X2lucHV0KCdcblx4MWJbMTs5Mm1bIFx4MWJbMTs5N21LZW1iYWxpIFx4MWJbMTs5Mm1dJykKICAgICAgICAgICAgZXhjZXB0IElPRXJyb3I6CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtIVx4MWJbMTs5N219IEZpbGUgdGlkYWsgYWRhICEnCiAgICAgICAgICAgICAgICByYXdfaW5wdXQoJ1xuXHgxYlsxOzkzbXtceDFiWzE7OTdtPEtlbWJhbGk+XHgxYlsxOzkzbX0nKQogICAgICAgICAgICAgICAgY3JhY2tfaW5kbygpCgogICAgICAgIGVsaWYgdGVhayA9PSAnMCcgb3IgdGVhayA9PSAnMDAnOgogICAgICAgICAgICBtZW51KCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bVtceDFiWzE7OTFtIVx4MWJbMTs5N21dXHgxYlsxOzk3bSBJc2kgWWcgQmVuYXIgIScKICAgICAgICAgICAgcGlsaWhfaW5kbygpCiAgICAgICAgcHJpbnQgJ3tceGYwXHg5Zlx4OGNceDg4fSBceDFiWzE7OTNtVG90YWwgSUQgXHgxYlsxOzkxbTpceDFiWzE7OTJtICcgKyBzdHIobGVuKGlkKSkKICAgICAgICBwcmludCAne1x4ZjBceDlmXHg4Y1x4ODh9IFx4MWJbMTs5M21TdG9wIFRla2FuIENUUkwrWicKICAgICAgICB0aXRpayA9IFsnLiAgICcsICcuLiAgJywgJy4uLiAnXQogICAgICAgIGZvciBvIGluIHRpdGlrOgogICAgICAgICAgICBwcmludCAnXHJceDFiWzE7OTdte1x4ZTJceDgwXHhiY30gXHgxYlsxOzkzbUNyYWNrIEJlcmphbGFuICcgKyBvLAogICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICAgICAgdGltZS5zbGVlcCgxKQoKICAgIHByaW50ICdcblx4MWJbMTs5N217XHhlMlx4ODBceGJjfSBceDFiWzE7OTNtR3VuYWthbiBNb2RlIFBlc2F3YXQgSmlrYSBUaWRhayBBZGEgSGFzaWwnCiAgICBwcmludCAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MCcKCiAgICBkZWYgbWFpbihhcmcpOgogICAgICAgIHpvd2UgPSBhcmcKICAgICAgICB0cnk6CiAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoKCdccnt9JykuZm9ybWF0KGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCdceDFiWzE7OTZtJUhceDFiWzE7OTFtOlx4MWJbMTs5M20lTVx4MWJbMTs5MW06XHgxYlsxOzkybSVTIFx4MWJbMTs5N20nICsgc3RyKGxlbih6b3dlKSkpKSkKICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgICAgIG9zLm1rZGlyKCdkb25lJykKICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgcGFzcwoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGFuID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8nICsgem93ZSArICcvP2FjY2Vzc190b2tlbj0nICsgdG9rZXQpCiAgICAgICAgICAgIGogPSBqc29uLmxvYWRzKGFuLnRleHQpCiAgICAgICAgICAgIGJvczEgPSBqWydmaXJzdF9uYW1lJ10ubG93ZXIoKSArICcxMjMnCiAgICAgICAgICAgIGRhdGEgPSB1cmxsaWIudXJsb3BlbignaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/YWNjZXNzX3Rva2VuPTIzNzc1OTkwOTU5MTY1NSUyNTI1N0MwZjE0MGFhYmVkZmI2NWFjMjdhNzM5ZWQxYTIyNjNiMSZmb3JtYXQ9anNvbiZzZGtfdmVyc2lvbj0yJmVtYWlsPScgKyB6b3dlICsgJyZsb2NhbGU9ZW5fVVMmcGFzc3dvcmQ9JyArIGJvczEgKyAnJnNkaz1pb3MmZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzPTEmc2lnPTNmNTU1Zjk5ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWY2JykKICAgICAgICAgICAga28gPSBqc29uLmxvYWQoZGF0YSkKICAgICAgICAgICAgaWYgJ2FjY2Vzc190b2tlbicgaW4ga286CiAgICAgICAgICAgICAgICBwcmludCAnXG5ceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGUyXHhiOFx4OTlceDFiWzE7OTdtfSBceDFiWzE7Mzc7NDJtQkVSSEFTSUwgXHgxYlswbScKICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGUyXHg4MFx4YmJceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGUyXHhhY1x4YTJceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyB6b3dlCiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhlMlx4OWNceDkzXHgxYlsxOzk3bX0gUGFzc3dvcmQgIFx4MWJbMTs5MW0+IFx4MWJbMTs5Mm0nICsgYm9zMQogICAgICAgICAgICAgICAgb2tlID0gb3BlbignZG9uZS9pbmRvLnR4dCcsICdhJykKICAgICAgICAgICAgICAgIG9rZS53cml0ZSgnXG57XHhjM1x4OTd9IEJFUkhBU0lMIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczEgKyAnXG4nKQogICAgICAgICAgICAgICAgb2tlLmNsb3NlKCkKICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoem93ZSkKICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4ga29bJ2Vycm9yX21zZyddOgogICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTNtXHhlMlx4YjhceDk5XHgxYlsxOzk3bX0gXHgxYlsxOzM3OzQ0bUNFS1BPSU5UIFx4MWJbMG0nCiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTNtXHhlMlx4ODBceGJiXHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5M20nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTNtXHhlMlx4YWNceGEyXHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5M20nICsgem93ZQogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkzbVx4ZTJceDljXHg5M1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTNtJyArIGJvczEKICAgICAgICAgICAgICAgIGNlayA9IG9wZW4oJ2RvbmUvaW5kby50eHQnLCAnYScpCiAgICAgICAgICAgICAgICBjZWsud3JpdGUoJ1xue1x4YzNceDk3fSBDRUtQT0lOVCB7XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ1x4MWJbMTszNzs0NG1uYW1lIFx4MWJbMG0nXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zMSArICdcbicpCiAgICAgICAgICAgICAgICBjZWsuY2xvc2UoKQogICAgICAgICAgICAgICAgY2VrcG9pbnQuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBib3MyID0galsnZmlyc3RfbmFtZSddLmxvd2VyKCkgKyAnMTIzNCcKICAgICAgICAgICAgICAgIGRhdGEgPSB1cmxsaWIudXJsb3BlbignaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/YWNjZXNzX3Rva2VuPTIzNzc1OTkwOTU5MTY1NSUyNTI1N0MwZjE0MGFhYmVkZmI2NWFjMjdhNzM5ZWQxYTIyNjNiMSZmb3JtYXQ9anNvbiZzZGtfdmVyc2lvbj0yJmVtYWlsPScgKyB6b3dlICsgJyZsb2NhbGU9ZW5fVVMmcGFzc3dvcmQ9JyArIGJvczIgKyAnJnNkaz1pb3MmZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzPTEmc2lnPTNmNTU1Zjk5ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWY2JykKICAgICAgICAgICAgICAgIGtvID0ganNvbi5sb2FkKGRhdGEpCiAgICAgICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBrbzoKICAgICAgICAgICAgICAgICAgICBwcmludCAnXG5ceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGUyXHhiOFx4OTlceDFiWzE7OTdtfSBceDFiWzE7Mzc7NDJtQkVSSEFTSUwgXHgxYlswbScKICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhlMlx4ODBceGJiXHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Mm0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4ZTJceGFjXHhhMlx4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIHpvd2UKICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhlMlx4OWNceDkzXHgxYlsxOzk3bX0gUGFzc3dvcmQgIFx4MWJbMTs5MW0+IFx4MWJbMTs5Mm0nICsgYm9zMgogICAgICAgICAgICAgICAgICAgIG9rZSA9IG9wZW4oJ2RvbmUvaW5kby50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgb2tlLndyaXRlKCdcbntceGMzXHg5N30gQkVSSEFTSUwgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zMiArICdcbicpCiAgICAgICAgICAgICAgICAgICAgb2tlLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBrb1snZXJyb3JfbXNnJ106CiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTNtXHhlMlx4YjhceDk5XHgxYlsxOzk3bX0gXHgxYlsxOzM3OzQ0bUNFS1BPSU5UIFx4MWJbMG0nCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkzbVx4ZTJceDgwXHhiYlx4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTNtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5M21ceGUyXHhhY1x4YTJceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkzbScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkzbVx4ZTJceDljXHg5M1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTNtJyArIGJvczIKICAgICAgICAgICAgICAgICAgICBjZWsgPSBvcGVuKCdkb25lL2luZG8udHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgIGNlay53cml0ZSgnXG57XHhjM1x4OTd9IENFS1BPSU5UIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczIgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgIGNlay5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgY2VrcG9pbnQuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGJvczMgPSBqWydmaXJzdF9uYW1lJ10ubG93ZXIoKSArICcxMjM0NScKICAgICAgICAgICAgICAgICAgICBkYXRhID0gdXJsbGliLnVybG9wZW4oJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luP2FjY2Vzc190b2tlbj0yMzc3NTk5MDk1OTE2NTUlMjUyNTdDMGYxNDBhYWJlZGZiNjVhYzI3YTczOWVkMWEyMjYzYjEmZm9ybWF0PWpzb24mc2RrX3ZlcnNpb249MiZlbWFpbD0nICsgem93ZSArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBib3MzICsgJyZzZGs9aW9zJmdlbmVyYXRlX3Nlc3Npb25fY29va2llcz0xJnNpZz0zZjU1NWY5OWZiNjFmY2Q3YWEwYzQ0ZjU4ZjUyMmVmNicpCiAgICAgICAgICAgICAgICAgICAga28gPSBqc29uLmxvYWQoZGF0YSkKICAgICAgICAgICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBrbzoKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhlMlx4YjhceDk5XHgxYlsxOzk3bX0gXHgxYlsxOzM3OzQybUJFUkhBU0lMIFx4MWJbMG0nCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGUyXHg4MFx4YmJceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4ZTJceGFjXHhhMlx4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIHpvd2UKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XFxceGUyXHg5Y1x4OTMxYlsxOzk3bX0gUGFzc3dvcmQgIFx4MWJbMTs5MW0+IFx4MWJbMTs5Mm0nICsgYm9zMwogICAgICAgICAgICAgICAgICAgICAgICBva2UgPSBvcGVuKCdkb25lL2luZG8udHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgICAgICBva2Uud3JpdGUoJ1xue1x4YzNceDk3fSBCRVJIQVNJTCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3MzICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgb2tlLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIGtvWydlcnJvcl9tc2cnXToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTNtXHhlMlx4YjhceDk5XHgxYlsxOzk3bX0gXHgxYlsxOzM3OzQ0bUNFS1BPSU5UIFx4MWJbMG0nCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5M21ceGUyXHg4MFx4YmJceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkzbScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkzbVx4ZTJceGFjXHhhMlx4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTNtJyArIHpvd2UKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkzbVx4ZTJceDljXHg5M1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTNtJyArIGJvczMKICAgICAgICAgICAgICAgICAgICAgICAgY2VrID0gb3BlbignZG9uZS9pbmRvLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgY2VrLndyaXRlKCdcbntceGMzXHg5N30gQ0VLUE9JTlQgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zMyArICdcbicpCiAgICAgICAgICAgICAgICAgICAgICAgIGNlay5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIGNla3BvaW50LmFwcGVuZCh6b3dlKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcGFzcwoKICAgIHAgPSBUaHJlYWRQb29sKDMwKQogICAgcC5tYXAobWFpbiwgaWQpCiAgICBwcmludCAnXG5ceDFiWzE7OTRtXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwJwogICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkzbVx4ZTJceDk3XHg4Zlx4MWJbMTs5N219IFx4MWJbMTs5M21TZWxlc2FpIC4uLicKICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5M21ceGUyXHg5N1x4OGZceDFiWzE7OTdtfSBceDFiWzE7OTNtVG90YWwgXHgxYlsxOzkybU9LXHgxYlsxOzk3bS9ceDFiWzE7OTNtQ1AgXHgxYlsxOzk3bTogXHgxYlsxOzkybScgKyBzdHIobGVuKG9rcykpICsgJ1x4MWJbMTs5N20vXHgxYlsxOzkzbScgKyBzdHIobGVuKGNla3BvaW50KSkKICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5M21ceGUyXHg5N1x4OGZceDFiWzE7OTdtfSBceDFiWzE7OTJtT0tceDFiWzE7OTdtL1x4MWJbMTs5M21DUCBceDFiWzE7OTNtZmlsZSB0ZXJzaW1wYW4gXHgxYlsxOzkxbTogXHgxYlsxOzkybWRvbmUvaW5kby50eHQnCiAgICBwcmludCA1MCAqICdceDFiWzE7OTRtXHhlMlx4OTRceDgwJwogICAgcmF3X2lucHV0KCdceDFiWzE7OTdtezxceDFiWzE7OTNtS2VtYmFsaVx4MWJbMTs5N20+fScpCiAgICBvcy5zeXN0ZW0oJ3B5dGhvbjIgeW9zaGkucHknKQoKCmRlZiBjcmFja19iYW5nbGEoKToKICAgIGdsb2JhbCB0b2tldAogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICB0cnk6CiAgICAgICAgdG9rZXQgPSBvcGVuKCdsb2dpbi50eHQnLCAncicpLnJlYWQoKQogICAgZXhjZXB0IElPRXJyb3I6CiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbSFceDFiWzE7OTdtfSBUb2tlbiBpbnZhbGlkJwogICAgICAgIG9zLnN5c3RlbSgncm0gLXJmIGxvZ2luLnR4dCcpCiAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgIGtlbHVhcigpCgogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBwcmludCBsb2dvCiAgICBwcmludCAxICogJ1x4MWJbMTs5NG1ceGUyXHhiOFx4OTlceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmEgXHhlMlx4YjhceDk5JwogICAgcHJpbnQgJ1x4MWJbMTs5N21bMV0gQ3JhY2sgRGFyaSBEYWZ0YXIgVGVtYW4nCiAgICBwcmludCAnXHgxYlsxOzk3bVsyXSBDcmFjayBEYXJpIFB1Ymxpay9UZW1hbicKICAgIHByaW50ICdceDFiWzE7OTdtWzNdIENyYWNrIERhcmkgRmlsZScKICAgIHByaW50ICdceDFiWzE7OTdtWzBdIEtlbWJhbGknCiAgICBwcmludCAxICogJ1x4MWJbMTs5NG1ceGUyXHhiOFx4OTlceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmEgXHhlMlx4YjhceDk5JwogICAgcGlsaWhfYmFuZ2xhKCkKCgpkZWYgcGlsaWhfYmFuZ2xhKCk6CiAgICB0ZWFrID0gcmF3X2lucHV0KCdceDFiWzE7OTZtUGlsaWhceDFiWzkxbT0+XHgxYlsxOzkybSAnKQogICAgaWYgdGVhayA9PSAnJzoKICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtIVx4MWJbMTs5N219IElzaSBZZyBCZW5hciAhJwogICAgICAgIHBpbGloX2JhbmdsYSgpCiAgICBlbHNlOgogICAgICAgIGlmIHRlYWsgPT0gJzEnIG9yIHRlYWsgPT0gJzAxJzoKICAgICAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgICAgIHByaW50IGxvZ28KICAgICAgICAgICAgcHJpbnQgMSAqICdceDFiWzE7OTRtXHhlMlx4YjhceDk5XHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhXHhlMlx4OTVceGJhIFx4ZTJceGI4XHg5OScKICAgICAgICAgICAgcHJpbnQgJyAgICAgICAgICAgICBceDFiWzE7NDQ7NDFtXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmIFx4MWJbMTszNzs0MW1DUkFDSyBCQU5HTEFERVNIIFx4MWJbMTszNzs0MW1ceGUyXHg5N1x4OGZceGUyXHg5N1x4OGZceGUyXHg5N1x4OGZceDFiWzBtJwogICAgICAgICAgICBwcmludCAxICogJ1x4MWJbMTs5NG1ceGUyXHhiOFx4OTlceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmEgXHhlMlx4YjhceDk5JwogICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS9tZS9mcmllbmRzP2FjY2Vzc190b2tlbj0nICsgdG9rZXQpCiAgICAgICAgICAgIHogPSBqc29uLmxvYWRzKHIudGV4dCkKICAgICAgICAgICAgZm9yIHMgaW4gelsnZGF0YSddOgogICAgICAgICAgICAgICAgaWQuYXBwZW5kKHNbJ2lkJ10pCgogICAgICAgIGVsaWYgdGVhayA9PSAnMicgb3IgdGVhayA9PSAnMDInOgogICAgICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICAgICAgcHJpbnQgbG9nbwogICAgICAgICAgICBwcmludCAxICogJ1x4MWJbMTs5NG1ceGUyXHhiOFx4OTlceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmFceGUyXHg5NVx4YmEgXHhlMlx4YjhceDk5JwogICAgICAgICAgICBwcmludCAnICAgICAgICAgICAgIFx4MWJbMTszNzs0MW1ceGUyXHg5N1x4OGZceGUyXHg5N1x4OGZceGUyXHg5N1x4OGYgXHgxYlsxOzM3OzQxbUNSQUNLIEJBTkdMQURFU0ggXHgxYlsxOzM3OzQxbVx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4Zlx4MWJbMG0nCiAgICAgICAgICAgIHByaW50IDEgKiAnXHgxYlsxOzk0bVx4ZTJceGI4XHg5OVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYVx4ZTJceDk1XHhiYSBceGUyXHhiOFx4OTknCiAgICAgICAgICAgIGlkYiA9IHJhd19pbnB1dCgnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX1ceDFiWzE7OTZtIElEIFB1Ymxpay9UZW1hbiBceDFiWzE7OTFtOlx4MWJbMTs5Mm0gJykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcG9rID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8nICsgaWRiICsgJz9hY2Nlc3NfdG9rZW49JyArIHRva2V0KQogICAgICAgICAgICAgICAgc3AgPSBqc29uLmxvYWRzKHBvay50ZXh0KQogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk2bVx4ZTJceDk3XHg4Zlx4MWJbMTs5N219XHgxYlsxOzk2bSBOYW1hIFx4MWJbMTs5MW06XHgxYlsxOzkybSAnICsgc3BbJ25hbWUnXQogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtIVx4MWJbMTs5N219IElEIHB1Ymxpay90ZW1hbiB0aWRhayBhZGEgIScKICAgICAgICAgICAgICAgIHJhd19pbnB1dCgnXG5ceDFiWzE7OTZte1x4MWJbMTs5N208S2VtYmFsaT5ceDFiWzE7OTZtfScpCiAgICAgICAgICAgICAgICBjcmFja19iYW5nbGEoKQogICAgICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6CiAgICAgICAgICAgICAgICBwcmludCAneyF9IFRpZGFrIGFkYSBrb25la3NpICEnCiAgICAgICAgICAgICAgICBrZWx1YXIoKQoKICAgICAgICAgICAgciA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJyArIGlkYiArICcvZnJpZW5kcz9hY2Nlc3NfdG9rZW49JyArIHRva2V0KQogICAgICAgICAgICB6ID0ganNvbi5sb2FkcyhyLnRleHQpCiAgICAgICAgICAgIGZvciBpIGluIHpbJ2RhdGEnXToKICAgICAgICAgICAgICAgIGlkLmFwcGVuZChpWydpZCddKQoKICAgICAgICBlbGlmIHRlYWsgPT0gJzMnIG9yIHRlYWsgPT0gJzAzJzoKICAgICAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgICAgIHByaW50IGxvZ28KICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgICAgICAgICAgICAgIHByaW50ICcgICAgICAgICAgICAgXHgxYlsxOzk2bVx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4ZiBceDFiWzE7OTdtQ1JBQ0sgQkFOR0xBREVTSCBceDFiWzE7OTZtXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmJwogICAgICAgICAgICAgICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgICAgICAgICAgICAgIGlkbGlzdCA9IHJhd19pbnB1dCgnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX1ceDFiWzE7OTZtIE5hbWEgRmlsZSBceDFiWzE7OTFtOlx4MWJbMTs5Mm0gJykKICAgICAgICAgICAgICAgIGZvciBsaW5lIGluIG9wZW4oaWRsaXN0LCAncicpLnJlYWRsaW5lcygpOgogICAgICAgICAgICAgICAgICAgIGlkLmFwcGVuZChsaW5lLnN0cmlwKCkpCgogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtIVx4MWJbMTs5N219IEZpbGUgdGlkYWsgYWRhICEgJwogICAgICAgICAgICAgICAgcmF3X2lucHV0KCdcblx4MWJbMTs5Mm1bIFx4MWJbMTs5N21LZW1iYWxpIFx4MWJbMTs5Mm1dJykKICAgICAgICAgICAgZXhjZXB0IElPRXJyb3I6CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtIVx4MWJbMTs5N219IEZpbGUgdGlkYWsgYWRhICEnCiAgICAgICAgICAgICAgICByYXdfaW5wdXQoJ1xuXHgxYlsxOzk2bXtceDFiWzE7OTdtPEtlbWJhbGk+XHgxYlsxOzk2bX0nKQogICAgICAgICAgICAgICAgY3JhY2tfYmFuZ2xhKCkKCiAgICAgICAgZWxpZiB0ZWFrID09ICcwJyBvciB0ZWFrID09ICcwMCc6CiAgICAgICAgICAgIG1lbnUoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW0hXHgxYlsxOzk3bX0gSXNpIFlnIEJlbmFyICEnCiAgICAgICAgICAgIHBpbGloX2JhbmdsYSgpCiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk2bVx4ZTJceGFjXHhhMlx4MWJbMTs5N219XHgxYlsxOzk2bSBUb3RhbCBJRCBceDFiWzE7OTFtOlx4MWJbMTs5Mm0gJyArIHN0cihsZW4oaWQpKQogICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Nm1ceGUyXHhhY1x4YTJceDFiWzE7OTdtfVx4MWJbMTs5Nm0gU3RvcCBUZWthbiBDVFJMK1onCiAgICAgICAgdGl0aWsgPSBbJy4gICAnLCAnLi4gICcsICcuLi4gJ10KICAgICAgICBmb3IgbyBpbiB0aXRpazoKICAgICAgICAgICAgcHJpbnQgJ1xyXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhlMlx4YjhceDk5XHgxYlsxOzk3bX1ceDFiWzE7OTZtIENyYWNrIEJlcmphbGFuICcgKyBvLAogICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICAgICAgdGltZS5zbGVlcCgxKQoKICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzk2bVx4ZTJceGI4XHg5OVx4MWJbMTs5N219IFx4MWJbMTs5Nm1HdW5ha2FuIE1vZGUgUGVzYXdhdCBKaWthIFRpZGFrIEFkYSBIYXNpbCcKICAgIHByaW50ICdceDFiWzE7OTRtXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwJwoKICAgIGRlZiBtYWluKGFyZyk6CiAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgoJ1xye30nKS5mb3JtYXQoZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoJ1x4MWJbMTs5Nm0lSFx4MWJbMTs5MW06XHgxYlsxOzkzbSVNXHgxYlsxOzkxbTpceDFiWzE7OTJtJVMnKSkpCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgem93ZSA9IGFyZwogICAgICAgIHRyeToKICAgICAgICAgICAgb3MubWtkaXIoJ2RvbmUnKQogICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICBwYXNzCgogICAgICAgIHRyeToKICAgICAgICAgICAgYW4gPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLycgKyB6b3dlICsgJy8/YWNjZXNzX3Rva2VuPScgKyB0b2tldCkKICAgICAgICAgICAgaiA9IGpzb24ubG9hZHMoYW4udGV4dCkKICAgICAgICAgICAgYm9zMSA9IGpbJ2ZpcnN0X25hbWUnXS5sb3dlcigpICsgJzEyMycKICAgICAgICAgICAgZGF0YSA9IHVybGxpYi51cmxvcGVuKCdodHRwczovL2ItYXBpLmZhY2Vib29rLmNvbS9tZXRob2QvYXV0aC5sb2dpbj9hY2Nlc3NfdG9rZW49MjM3NzU5OTA5NTkxNjU1JTI1MjU3QzBmMTQwYWFiZWRmYjY1YWMyN2E3MzllZDFhMjI2M2IxJmZvcm1hdD1qc29uJnNka192ZXJzaW9uPTImZW1haWw9JyArIHpvd2UgKyAnJmxvY2FsZT1lbl9VUyZwYXNzd29yZD0nICsgYm9zMSArICcmc2RrPWlvcyZnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXM9MSZzaWc9M2Y1NTVmOTlmYjYxZmNkN2FhMGM0NGY1OGY1MjJlZjYnKQogICAgICAgICAgICBrbyA9IGpzb24ubG9hZChkYXRhKQogICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBrbzoKICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzM3OzQybUJFUkhBU0lMIFx4MWJbMG0nCiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIHpvd2UKICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTJtJyArIGJvczEKICAgICAgICAgICAgICAgIG9rZSA9IG9wZW4oJ2RvbmUvYmFuZ2xhLnR4dCcsICdhJykKICAgICAgICAgICAgICAgIG9rZS53cml0ZSgnXG57XHhjM1x4OTd9IEJFUkhBU0lMIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczEgKyAnXG4nKQogICAgICAgICAgICAgICAgb2tlLmNsb3NlKCkKICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoem93ZSkKICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4ga29bJ2Vycm9yX21zZyddOgogICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7Mzc7NDRtQ0VLUE9JTlQgXHgxYlswbScKICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Nm1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTZtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk2bVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Nm0nICsgem93ZQogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk2bVx4YzNceDk3XHgxYlsxOzk3bX0gUGFzc3dvcmQgIFx4MWJbMTs5MW0+IFx4MWJbMTs5Nm0nICsgYm9zMQogICAgICAgICAgICAgICAgY2VrID0gb3BlbignZG9uZS9iYW5nbGEudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgY2VrLndyaXRlKCdcbntceGMzXHg5N30gQ0VLUE9JTlQgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zMSArICdcbicpCiAgICAgICAgICAgICAgICBjZWsuY2xvc2UoKQogICAgICAgICAgICAgICAgY2VrcG9pbnQuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBib3MyID0galsnZmlyc3RfbmFtZSddLmxvd2VyKCkgKyAnMTIzNCcKICAgICAgICAgICAgICAgIGRhdGEgPSB1cmxsaWIudXJsb3BlbignaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/YWNjZXNzX3Rva2VuPTIzNzc1OTkwOTU5MTY1NSUyNTI1N0MwZjE0MGFhYmVkZmI2NWFjMjdhNzM5ZWQxYTIyNjNiMSZmb3JtYXQ9anNvbiZzZGtfdmVyc2lvbj0yJmVtYWlsPScgKyB6b3dlICsgJyZsb2NhbGU9ZW5fVVMmcGFzc3dvcmQ9JyArIGJvczIgKyAnJnNkaz1pb3MmZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzPTEmc2lnPTNmNTU1Zjk5ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWY2JykKICAgICAgICAgICAgICAgIGtvID0ganNvbi5sb2FkKGRhdGEpCiAgICAgICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBrbzoKICAgICAgICAgICAgICAgICAgICBwcmludCAnXG5ceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFx4MWJbMTszNzs0Mm1CRVJIQVNJTCBceDFiWzBtJwogICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIHpvd2UKICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzkybScgKyBib3MyCiAgICAgICAgICAgICAgICAgICAgb2tlID0gb3BlbignZG9uZS9iYW5nbGEudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgIG9rZS53cml0ZSgnXG57XHhjM1x4OTd9IEJFUkhBU0lMIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczIgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgIG9rZS5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4ga29bJ2Vycm9yX21zZyddOgogICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzk2bVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzM3OzQ0bUNFS1BPSU5UIFx4MWJbMG0nCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk2bVx4YzNceDk3XHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Nm0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk2bVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Nm0nICsgem93ZQogICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Nm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTZtJyArIGJvczIKICAgICAgICAgICAgICAgICAgICBjZWsgPSBvcGVuKCdkb25lL2JhbmdsYS50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgY2VrLndyaXRlKCdcbntceGMzXHg5N30gQ0VLUE9JTlQgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zMiArICdcbicpCiAgICAgICAgICAgICAgICAgICAgY2VrLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICBjZWtwb2ludC5hcHBlbmQoem93ZSkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgYm9zMyA9IGpbJ2ZpcnN0X25hbWUnXS5sb3dlcigpICsgJzEyMzQ1JwogICAgICAgICAgICAgICAgICAgIGRhdGEgPSB1cmxsaWIudXJsb3BlbignaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/YWNjZXNzX3Rva2VuPTIzNzc1OTkwOTU5MTY1NSUyNTI1N0MwZjE0MGFhYmVkZmI2NWFjMjdhNzM5ZWQxYTIyNjNiMSZmb3JtYXQ9anNvbiZzZGtfdmVyc2lvbj0yJmVtYWlsPScgKyB6b3dlICsgJyZsb2NhbGU9ZW5fVVMmcGFzc3dvcmQ9JyArIGJvczMgKyAnJnNkaz1pb3MmZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzPTEmc2lnPTNmNTU1Zjk5ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWY2JykKICAgICAgICAgICAgICAgICAgICBrbyA9IGpzb24ubG9hZChkYXRhKQogICAgICAgICAgICAgICAgICAgIGlmICdhY2Nlc3NfdG9rZW4nIGluIGtvOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXG5ceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFx4MWJbMTszNzs0Mm1CRVJIQVNJTCBceDFiWzBtJwogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Mm0nICsgem93ZQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzkybScgKyBib3MzCiAgICAgICAgICAgICAgICAgICAgICAgIG9rZSA9IG9wZW4oJ2RvbmUvYmFuZ2xhLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgb2tlLndyaXRlKCdcbntceGMzXHg5N30gQkVSSEFTSUwgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zMyArICdcbicpCiAgICAgICAgICAgICAgICAgICAgICAgIG9rZS5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoem93ZSkKICAgICAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBrb1snZXJyb3JfbXNnJ106CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzk2bVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzM3OzQ0bUNFS1BPSU5UIFx4MWJbMG0nCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Nm1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTZtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzk2bScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Nm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTZtJyArIGJvczMKICAgICAgICAgICAgICAgICAgICAgICAgY2VrID0gb3BlbignZG9uZS9iYW5nbGEudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgICAgICBjZWsud3JpdGUoJ1xue1x4YzNceDk3fSBDRUtQT0lOVCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3MzICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgY2VrLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgY2VrcG9pbnQuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgYm9zNCA9ICc3ODY3ODYnCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB1cmxsaWIudXJsb3BlbignaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/YWNjZXNzX3Rva2VuPTIzNzc1OTkwOTU5MTY1NSUyNTI1N0MwZjE0MGFhYmVkZmI2NWFjMjdhNzM5ZWQxYTIyNjNiMSZmb3JtYXQ9anNvbiZzZGtfdmVyc2lvbj0yJmVtYWlsPScgKyB6b3dlICsgJyZsb2NhbGU9ZW5fVVMmcGFzc3dvcmQ9JyArIGJvczQgKyAnJnNkaz1pb3MmZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzPTEmc2lnPTNmNTU1Zjk5ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWY2JykKICAgICAgICAgICAgICAgICAgICAgICAga28gPSBqc29uLmxvYWQoZGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ2FjY2Vzc190b2tlbicgaW4ga286CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXG5ceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFx4MWJbMTszNzs0Mm1CRVJIQVNJTCBceDFiWzBtJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Mm0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzkybScgKyBib3M0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBva2UgPSBvcGVuKCdkb25lL2JhbmdsYS50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBva2Uud3JpdGUoJ1xue1x4YzNceDk3fSBCRVJIQVNJTCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3M0ICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rZS5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIGtvWydlcnJvcl9tc2cnXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzk2bVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzM3OzQ0bUNFS1BPSU5UIFx4MWJbMG0nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzk2bScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Nm1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTZtJyArIHpvd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Nm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTZtJyArIGJvczQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlayA9IG9wZW4oJ2RvbmUvYmFuZ2xhLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlay53cml0ZSgnXG57XHhjM1x4OTd9IENFS1BPSU5UIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczQgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VrLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNla3BvaW50LmFwcGVuZCh6b3dlKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcGFzcwoKICAgIHAgPSBUaHJlYWRQb29sKDMwKQogICAgcC5tYXAobWFpbiwgaWQpCiAgICBwcmludCAnXG5ceDFiWzE7OTRtXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwJwogICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk2bVx4ZTJceDk3XHg4Zlx4MWJbMTs5N219IFx4MWJbMTs5Nm1TZWxlc2FpIC4uLicKICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Nm1ceGUyXHg5N1x4OGZceDFiWzE7OTdtfSBceDFiWzE7OTZtVG90YWwgXHgxYlsxOzkybU9LXHgxYlsxOzk3bS9ceDFiWzE7OTZtQ1AgXHgxYlsxOzk3bTogXHgxYlsxOzkybScgKyBzdHIobGVuKG9rcykpICsgJ1x4MWJbMTs5N20vXHgxYlsxOzkzbScgKyBzdHIobGVuKGNla3BvaW50KSkKICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Nm1ceGUyXHg5N1x4OGZceDFiWzE7OTdtfSBceDFiWzE7OTJtT0tceDFiWzE7OTdtL1x4MWJbMTs5Nm1DUCBceDFiWzE7OTZtZmlsZSB0ZXJzaW1wYW4gXHgxYlsxOzkxbTogXHgxYlsxOzkybWRvbmUvYmFuZ2xhLnR4dCcKICAgIHByaW50IDUwICogJ1x4MWJbMTs5NG1ceGUyXHg5NFx4ODAnCiAgICByYXdfaW5wdXQoJ1x4MWJbMTs5N217PFx4MWJbMTs5Nm1LZW1iYWxpXHgxYlsxOzk3bT59JykKICAgIG9zLnN5c3RlbSgncHl0aG9uMiB5b3NoaS5weScpCgoKZGVmIGNyYWNrX3VzYSgpOgogICAgZ2xvYmFsIHRva2V0CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHRyeToKICAgICAgICB0b2tldCA9IG9wZW4oJ2xvZ2luLnR4dCcsICdyJykucmVhZCgpCiAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICBwcmludCAnXHgxYlsxOzk2bVshXSBceDFiWzE7OTFtVG9rZW4gaW52YWxpZCcKICAgICAgICBvcy5zeXN0ZW0oJ3JtIC1yZiBsb2dpbi50eHQnKQogICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICBrZWx1YXIoKQoKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgcHJpbnQgbG9nbwogICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5NW0wMVx4MWJbMTs5N219IENyYWNrIERhcmkgRGFmdGFyIFRlbWFuJwogICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk1bTAyXHgxYlsxOzk3bX0gQ3JhY2sgRGFyaSBQdWJsaWsvVGVtYW4nCiAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtMDNceDFiWzE7OTdtfSBDcmFjayBEYXJpIEZpbGUnCiAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtMDBceDFiWzE7OTdtfSBLZW1iYWxpJwogICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgIHBpbGloX3VzYSgpCgoKZGVmIHBpbGloX3VzYSgpOgogICAgdGVhayA9IHJhd19pbnB1dCgnXHgxYlsxOzk1bVx4ZWZceGI4XHhiYlx4ZTNceDgzXHg4N1x4ZTJceDk1XHg5MFx4ZTRceGI4XHg4MFx4ZTJceDk2XHhiOCBceDFiWzkxbTpceDFiWzE7OTJtICcpCiAgICBpZiB0ZWFrID09ICcnOgogICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW0hXHgxYlsxOzk3bX1ceDFiWzE7OTdtIElzaSBZZyBCZW5hciAhJwogICAgICAgIHBpbGloX3VzYSgpCiAgICBlbHNlOgogICAgICAgIGlmIHRlYWsgPT0gJzEnIG9yIHRlYWsgPT0gJzAxJzoKICAgICAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgICAgIHByaW50IGxvZ28KICAgICAgICAgICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgICAgICAgICAgcHJpbnQgJyAgICAgICAgICAgICAgICBceDFiWzE7OTVtXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmIFx4MWJbMTs5N21DUkFDSyBVU0EgXHgxYlsxOzk1bVx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4ZicKICAgICAgICAgICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgICAgICAgICAgciA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vbWUvZnJpZW5kcz9hY2Nlc3NfdG9rZW49JyArIHRva2V0KQogICAgICAgICAgICB6ID0ganNvbi5sb2FkcyhyLnRleHQpCiAgICAgICAgICAgIGZvciBzIGluIHpbJ2RhdGEnXToKICAgICAgICAgICAgICAgIGlkLmFwcGVuZChzWydpZCddKQoKICAgICAgICBlbGlmIHRlYWsgPT0gJzInIG9yIHRlYWsgPT0gJzAyJzoKICAgICAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgICAgIHByaW50IGxvZ28KICAgICAgICAgICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgICAgICAgICAgcHJpbnQgJyAgICAgICAgICAgICAgICBceDFiWzE7OTVtXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmIFx4MWJbMTs5N21DUkFDSyBVU0EgXHgxYlsxOzk1bVx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4ZicKICAgICAgICAgICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgICAgICAgICAgaWR0ID0gcmF3X2lucHV0KCdceDFiWzE7OTdte1x4MWJbMTs5NW1ceGUyXHg5N1x4OGZceDFiWzE7OTdtfSBceDFiWzE7OTVtSUQgUHVibGlrL1RlbWFuIFx4MWJbMTs5MW06XHgxYlsxOzkybSAnKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBqb2sgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLycgKyBpZHQgKyAnP2FjY2Vzc190b2tlbj0nICsgdG9rZXQpCiAgICAgICAgICAgICAgICBvcCA9IGpzb24ubG9hZHMoam9rLnRleHQpCiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzk1bU5hbWEgXHgxYlsxOzkxbTpceDFiWzE7OTJtICcgKyBvcFsnbmFtZSddCiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW0hXHgxYlsxOzk3bX0gSUQgcHVibGlrL3RlbWFuIHRpZGFrIGFkYSAhJwogICAgICAgICAgICAgICAgcmF3X2lucHV0KCdcblx4MWJbMTs5NW1bXHgxYlsxOzk3bTxLZW1iYWxpPlx4MWJbMTs5NW1dJykKICAgICAgICAgICAgICAgIGNyYWNrX3VzYSgpCiAgICAgICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoKICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW0hXHgxYlsxOzk3bX0gVGlkYWsgYWRhIGtvbmVrc2kgIScKICAgICAgICAgICAgICAgIGtlbHVhcigpCgogICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8nICsgaWR0ICsgJy9mcmllbmRzP2FjY2Vzc190b2tlbj0nICsgdG9rZXQpCiAgICAgICAgICAgIHogPSBqc29uLmxvYWRzKHIudGV4dCkKICAgICAgICAgICAgZm9yIGkgaW4gelsnZGF0YSddOgogICAgICAgICAgICAgICAgaWQuYXBwZW5kKGlbJ2lkJ10pCgogICAgICAgIGVsaWYgdGVhayA9PSAnMycgb3IgdGVhayA9PSAnMDMnOgogICAgICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICAgICAgcHJpbnQgbG9nbwogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBwcmludCA1MCAqICdceDFiWzE7OTRtXHhlMlx4OTRceDgwJwogICAgICAgICAgICAgICAgcHJpbnQgJyAgICAgICAgICAgICAgICBceDFiWzE7OTVtXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmIFx4MWJbMTs5N21DUkFDSyBVU0EgXHgxYlsxOzk1bVx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4ZicKICAgICAgICAgICAgICAgIHByaW50IDUwICogJ1x4MWJbMTs5NG1ceGUyXHg5NFx4ODAnCiAgICAgICAgICAgICAgICBpZGxpc3QgPSByYXdfaW5wdXQoJ1x4MWJbMTs5N217XHgxYlsxOzk1bVx4ZTJceDk3XHg4Zlx4MWJbMTs5N219IFx4MWJbMTs5NW1OYW1hIEZpbGVceDFiWzE7OTFtIDpceDFiWzE7OTJtICcpCiAgICAgICAgICAgICAgICBmb3IgbGluZSBpbiBvcGVuKGlkbGlzdCwgJ3InKS5yZWFkbGluZXMoKToKICAgICAgICAgICAgICAgICAgICBpZC5hcHBlbmQobGluZS5zdHJpcCgpKQoKICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbSFceDFiWzE7OTdtfSBGaWxlIHRpZGFrIGFkYSAhICcKICAgICAgICAgICAgICAgIHJhd19pbnB1dCgnXG5ceDFiWzE7OTJtWyBceDFiWzE7OTdtS2VtYmFsaSBceDFiWzE7OTJtXScpCiAgICAgICAgICAgIGV4Y2VwdCBJT0Vycm9yOgogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbSFceDFiWzE7OTdtfSBGaWxlIHRpZGFrIGFkYSAhJwogICAgICAgICAgICAgICAgcmF3X2lucHV0KCdcblx4MWJbMTs5NW1bXHgxYlsxOzk3bTxLZW1iYWxpPlx4MWJbMTs5NW1dJykKICAgICAgICAgICAgICAgIGNyYWNrX3VzYSgpCgogICAgICAgIGVsaWYgdGVhayA9PSAnMCcgb3IgdGVhayA9PSAnMDAnOgogICAgICAgICAgICBtZW51KCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bVtceDFiWzE7OTFtIVx4MWJbMTs5N21dXHgxYlsxOzk3bSBJc2kgWWcgQmVuYXIgIScKICAgICAgICAgICAgcGlsaWhfdXNhKCkKICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzk1bVRvdGFsIElEIFx4MWJbMTs5MW06XHgxYlsxOzkybSAnICsgc3RyKGxlbihpZCkpCiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk1bVx4ZTJceDk3XHg4Zlx4MWJbMTs5N219IFx4MWJbMTs5NW1TdG9wIFRla2FuIENUUkwrWicKICAgICAgICB0aXRpayA9IFsnLiAgICcsICcuLiAgJywgJy4uLiAnXQogICAgICAgIGZvciBvIGluIHRpdGlrOgogICAgICAgICAgICBwcmludCAnXHJceDFiWzE7OTdte1x4MWJbMTs5NW1ceGUyXHg5N1x4OGZceDFiWzE7OTdtfSBceDFiWzE7OTVtQ3JhY2sgQmVyamFsYW4gJyArIG8sCiAgICAgICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgICAgICAgICB0aW1lLnNsZWVwKDEpCgogICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzk1bUd1bmFrYW4gTW9kZSBQZXNhd2F0IEppa2EgVGlkYWsgQWRhIEhhc2lsJwogICAgcHJpbnQgJ1x4MWJbMTs5NG1ceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODAnCgogICAgZGVmIG1haW4oYXJnKToKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCgnXHJ7fScpLmZvcm1hdChkYXRldGltZS5ub3coKS5zdHJmdGltZSgnXHgxYlsxOzk2bSVIXHgxYlsxOzkxbTpceDFiWzE7OTNtJU1ceDFiWzE7OTFtOlx4MWJbMTs5Mm0lUycpKSkKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB6b3dlID0gYXJnCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcy5ta2RpcignZG9uZScpCiAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgIHBhc3MKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBhbiA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJyArIHpvd2UgKyAnLz9hY2Nlc3NfdG9rZW49JyArIHRva2V0KQogICAgICAgICAgICBqID0ganNvbi5sb2Fkcyhhbi50ZXh0KQogICAgICAgICAgICBib3MxID0gJ2lsb3ZleW91JwogICAgICAgICAgICBkYXRhID0gdXJsbGliLnVybG9wZW4oJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luP2FjY2Vzc190b2tlbj0yMzc3NTk5MDk1OTE2NTUlMjUyNTdDMGYxNDBhYWJlZGZiNjVhYzI3YTczOWVkMWEyMjYzYjEmZm9ybWF0PWpzb24mc2RrX3ZlcnNpb249MiZlbWFpbD0nICsgem93ZSArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBib3MxICsgJyZzZGs9aW9zJmdlbmVyYXRlX3Nlc3Npb25fY29va2llcz0xJnNpZz0zZjU1NWY5OWZiNjFmY2Q3YWEwYzQ0ZjU4ZjUyMmVmNicpCiAgICAgICAgICAgIGtvID0ganNvbi5sb2FkKGRhdGEpCiAgICAgICAgICAgIGlmICdhY2Nlc3NfdG9rZW4nIGluIGtvOgogICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTJtQkVSSEFTSUwnCiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIHpvd2UKICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTJtJyArIGJvczEKICAgICAgICAgICAgICAgIG9rZSA9IG9wZW4oJ2RvbmUvdXNhLnR4dCcsICdhJykKICAgICAgICAgICAgICAgIG9rZS53cml0ZSgnXG57XHhjM1x4OTd9IEJFUkhBU0lMIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczEgKyAnXG4nKQogICAgICAgICAgICAgICAgb2tlLmNsb3NlKCkKICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoem93ZSkKICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4ga29bJ2Vycm9yX21zZyddOgogICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTVtQ0VLUE9JTlQnCiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzk1bScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5NW1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTVtJyArIHpvd2UKICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5NW1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTVtJyArIGJvczEKICAgICAgICAgICAgICAgIGNlayA9IG9wZW4oJ2RvbmUvdXNhLnR4dCcsICdhJykKICAgICAgICAgICAgICAgIGNlay53cml0ZSgnXG57XHhjM1x4OTd9IENFS1BPSU5UIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczEgKyAnXG4nKQogICAgICAgICAgICAgICAgY2VrLmNsb3NlKCkKICAgICAgICAgICAgICAgIGNla3BvaW50LmFwcGVuZCh6b3dlKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgYm9zMiA9ICcxMjM0NTYnCiAgICAgICAgICAgICAgICBkYXRhID0gdXJsbGliLnVybG9wZW4oJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luP2FjY2Vzc190b2tlbj0yMzc3NTk5MDk1OTE2NTUlMjUyNTdDMGYxNDBhYWJlZGZiNjVhYzI3YTczOWVkMWEyMjYzYjEmZm9ybWF0PWpzb24mc2RrX3ZlcnNpb249MiZlbWFpbD0nICsgem93ZSArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBib3MyICsgJyZzZGs9aW9zJmdlbmVyYXRlX3Nlc3Npb25fY29va2llcz0xJnNpZz0zZjU1NWY5OWZiNjFmY2Q3YWEwYzQ0ZjU4ZjUyMmVmNicpCiAgICAgICAgICAgICAgICBrbyA9IGpzb24ubG9hZChkYXRhKQogICAgICAgICAgICAgICAgaWYgJ2FjY2Vzc190b2tlbicgaW4ga286CiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTJtQkVSSEFTSUwnCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Mm0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Mm0nICsgem93ZQogICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTJtJyArIGJvczIKICAgICAgICAgICAgICAgICAgICBva2UgPSBvcGVuKCdkb25lL3VzYS50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgb2tlLndyaXRlKCdcbntceGMzXHg5N30gQkVSSEFTSUwgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zMiArICdcbicpCiAgICAgICAgICAgICAgICAgICAgb2tlLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBrb1snZXJyb3JfbXNnJ106CiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTVtQ0VLUE9JTlQnCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk1bVx4YzNceDk3XHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5NW0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk1bVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5NW0nICsgem93ZQogICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5NW1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTVtJyArIGJvczIKICAgICAgICAgICAgICAgICAgICBjZWsgPSBvcGVuKCdkb25lL3VzYS50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgY2VrLndyaXRlKCdcbntceGMzXHg5N30gQ0VLUE9JTlQgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zMiArICdcbicpCiAgICAgICAgICAgICAgICAgICAgY2VrLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICBjZWtwb2ludC5hcHBlbmQoem93ZSkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgYm9zMyA9IGpbJ2ZpcnN0X25hbWUnXSArICcxMjMnCiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHVybGxpYi51cmxvcGVuKCdodHRwczovL2ItYXBpLmZhY2Vib29rLmNvbS9tZXRob2QvYXV0aC5sb2dpbj9hY2Nlc3NfdG9rZW49MjM3NzU5OTA5NTkxNjU1JTI1MjU3QzBmMTQwYWFiZWRmYjY1YWMyN2E3MzllZDFhMjI2M2IxJmZvcm1hdD1qc29uJnNka192ZXJzaW9uPTImZW1haWw9JyArIHpvd2UgKyAnJmxvY2FsZT1lbl9VUyZwYXNzd29yZD0nICsgYm9zMyArICcmc2RrPWlvcyZnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXM9MSZzaWc9M2Y1NTVmOTlmYjYxZmNkN2FhMGM0NGY1OGY1MjJlZjYnKQogICAgICAgICAgICAgICAgICAgIGtvID0ganNvbi5sb2FkKGRhdGEpCiAgICAgICAgICAgICAgICAgICAgaWYgJ2FjY2Vzc190b2tlbicgaW4ga286CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzkybUJFUkhBU0lMJwogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Mm0nICsgem93ZQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzkybScgKyBib3MzCiAgICAgICAgICAgICAgICAgICAgICAgIG9rZSA9IG9wZW4oJ2RvbmUvdXNhLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgb2tlLndyaXRlKCdcbntceGMzXHg5N30gQkVSSEFTSUwgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zMyArICdcbicpCiAgICAgICAgICAgICAgICAgICAgICAgIG9rZS5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoem93ZSkKICAgICAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBrb1snZXJyb3JfbXNnJ106CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzk1bVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzk1bUNFS1BPSU5UJwogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzk1bScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk1bVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5NW0nICsgem93ZQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzk1bScgKyBib3MzCiAgICAgICAgICAgICAgICAgICAgICAgIGNlayA9IG9wZW4oJ2RvbmUvdXNhLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgY2VrLndyaXRlKCdcbntceGMzXHg5N30gQ0VLUE9JTlQgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zMyArICdcbicpCiAgICAgICAgICAgICAgICAgICAgICAgIGNlay5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIGNla3BvaW50LmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIGJvczQgPSBqWydmaXJzdF9uYW1lJ10gKyAnMTIzNCcKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHVybGxpYi51cmxvcGVuKCdodHRwczovL2ItYXBpLmZhY2Vib29rLmNvbS9tZXRob2QvYXV0aC5sb2dpbj9hY2Nlc3NfdG9rZW49MjM3NzU5OTA5NTkxNjU1JTI1MjU3QzBmMTQwYWFiZWRmYjY1YWMyN2E3MzllZDFhMjI2M2IxJmZvcm1hdD1qc29uJnNka192ZXJzaW9uPTImZW1haWw9JyArIHpvd2UgKyAnJmxvY2FsZT1lbl9VUyZwYXNzd29yZD0nICsgYm9zNCArICcmc2RrPWlvcyZnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXM9MSZzaWc9M2Y1NTVmOTlmYjYxZmNkN2FhMGM0NGY1OGY1MjJlZjYnKQogICAgICAgICAgICAgICAgICAgICAgICBrbyA9IGpzb24ubG9hZChkYXRhKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBrbzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzkybUJFUkhBU0lMJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Mm0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzkybScgKyBib3M0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBva2UgPSBvcGVuKCdkb25lL3VzYS50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBva2Uud3JpdGUoJ1xue1x4YzNceDk3fSBCRVJIQVNJTCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3M0ICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rZS5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIGtvWydlcnJvcl9tc2cnXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzk1bVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzk1bUNFS1BPSU5UJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk1bVx4YzNceDk3XHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5NW0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzk1bScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzk1bScgKyBib3M0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWsgPSBvcGVuKCdkb25lL3VzYS50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWsud3JpdGUoJ1xue1x4YzNceDk3fSBDRUtQT0lOVCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3M0ICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlay5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWtwb2ludC5hcHBlbmQoem93ZSkKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvczUgPSBqWydmaXJzdF9uYW1lJ10gKyAnMTIzNDUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gdXJsbGliLnVybG9wZW4oJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luP2FjY2Vzc190b2tlbj0yMzc3NTk5MDk1OTE2NTUlMjUyNTdDMGYxNDBhYWJlZGZiNjVhYzI3YTczOWVkMWEyMjYzYjEmZm9ybWF0PWpzb24mc2RrX3ZlcnNpb249MiZlbWFpbD0nICsgem93ZSArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBib3M1ICsgJyZzZGs9aW9zJmdlbmVyYXRlX3Nlc3Npb25fY29va2llcz0xJnNpZz0zZjU1NWY5OWZiNjFmY2Q3YWEwYzQ0ZjU4ZjUyMmVmNicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrbyA9IGpzb24ubG9hZChkYXRhKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ2FjY2Vzc190b2tlbicgaW4ga286CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTJtQkVSSEFTSUwnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Mm0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Mm0nICsgem93ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTJtJyArIGJvczUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva2UgPSBvcGVuKCdkb25lL3VzYS50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tlLndyaXRlKCdcbntceGMzXHg5N30gQkVSSEFTSUwgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zNSArICdcbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tlLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBrb1snZXJyb3JfbXNnJ106CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTVtQ0VLUE9JTlQnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk1bVx4YzNceDk3XHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5NW0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk1bVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5NW0nICsgem93ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5NW1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTVtJyArIGJvczUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWsgPSBvcGVuKCdkb25lL3VzYS50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VrLndyaXRlKCdcbntceGMzXHg5N30gQ0VLUE9JTlQgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zNSArICdcbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VrLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWtwb2ludC5hcHBlbmQoem93ZSkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHBhc3MKCiAgICBwID0gVGhyZWFkUG9vbCgzMCkKICAgIHAubWFwKG1haW4sIGlkKQogICAgcHJpbnQgJ1xuXHgxYlsxOzk0bVx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MCcKICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5NW1ceGUyXHg5N1x4OGZceDFiWzE7OTdtfSBceDFiWzE7OTVtU2VsZXNhaSAuLi4nCiAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzk1bVRvdGFsIFx4MWJbMTs5Mm1PS1x4MWJbMTs5N20vXHgxYlsxOzk1bUNQIFx4MWJbMTs5N206IFx4MWJbMTs5Mm0nICsgc3RyKGxlbihva3MpKSArICdceDFiWzE7OTdtL1x4MWJbMTs5NW0nICsgc3RyKGxlbihjZWtwb2ludCkpCiAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzkybU9LXHgxYlsxOzk3bS9ceDFiWzE7OTVtQ1AgXHgxYlsxOzk1bWZpbGUgdGVyc2ltcGFuIFx4MWJbMTs5MW06IFx4MWJbMTs5Mm1kb25lL3VzYS50eHQnCiAgICBwcmludCA1MCAqICdceDFiWzE7OTRtXHhlMlx4OTRceDgwJwogICAgcmF3X2lucHV0KCdceDFiWzE7OTdtezxceDFiWzE7OTVtS2VtYmFsaVx4MWJbMTs5N20+fScpCiAgICBvcy5zeXN0ZW0oJ3B5dGhvbjIgeW9zaGkucHknKQoKCmRlZiBjcmFja19wYWtpcygpOgogICAgZ2xvYmFsIHRva2V0CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHRyeToKICAgICAgICB0b2tldCA9IG9wZW4oJ2xvZ2luLnR4dCcsICdyJykucmVhZCgpCiAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICBwcmludCAnXHgxYlsxOzk2bVshXSBceDFiWzE7OTFtVG9rZW4gaW52YWxpZCcKICAgICAgICBvcy5zeXN0ZW0oJ3JtIC1yZiBsb2dpbi50eHQnKQogICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICBrZWx1YXIoKQoKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgcHJpbnQgbG9nbwogICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW0wMVx4MWJbMTs5N219IENyYWNrIERhcmkgRGFmdGFyIFRlbWFuJwogICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbTAyXHgxYlsxOzk3bX0gQ3JhY2sgRGFyaSBQdWJsaWsvVGVtYW4nCiAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtMDNceDFiWzE7OTdtfSBDcmFjayBEYXJpIEZpbGUnCiAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtMDBceDFiWzE7OTdtfSBLZW1iYWxpJwogICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgIHBpbGloX3Bha2lzKCkKCgpkZWYgcGlsaWhfcGFraXMoKToKICAgIHRlYWsgPSByYXdfaW5wdXQoJ1x4MWJbMTs5MW1ceGVmXHhiOFx4YmJceGUzXHg4M1x4ODdceGUyXHg5NVx4OTBceGU0XHhiOFx4ODBceGUyXHg5Nlx4YjggXHgxYls5MW06XHgxYlsxOzkybSAnKQogICAgaWYgdGVhayA9PSAnJzoKICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtIVx4MWJbMTs5N219XHgxYlsxOzk3bSBJc2kgWWcgQmVuYXIgIScKICAgICAgICBwaWxpaF9wYWtpcygpCiAgICBlbHNlOgogICAgICAgIGlmIHRlYWsgPT0gJzEnIG9yIHRlYWsgPT0gJzAxJzoKICAgICAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgICAgIHByaW50IGxvZ28KICAgICAgICAgICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgICAgICAgICAgcHJpbnQgJyAgICAgICAgICAgICBceDFiWzE7OTFtXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmIFx4MWJbMTs5N21DUkFDSyBQQUtJU1RBTiBceDFiWzE7OTFtXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmJwogICAgICAgICAgICBwcmludCA1MCAqICdceDFiWzE7OTRtXHhlMlx4OTRceDgwJwogICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS9tZS9mcmllbmRzP2FjY2Vzc190b2tlbj0nICsgdG9rZXQpCiAgICAgICAgICAgIHogPSBqc29uLmxvYWRzKHIudGV4dCkKICAgICAgICAgICAgZm9yIHMgaW4gelsnZGF0YSddOgogICAgICAgICAgICAgICAgaWQuYXBwZW5kKHNbJ2lkJ10pCgogICAgICAgIGVsaWYgdGVhayA9PSAnMicgb3IgdGVhayA9PSAnMDInOgogICAgICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICAgICAgcHJpbnQgbG9nbwogICAgICAgICAgICBwcmludCA1MCAqICdceDFiWzE7OTRtXHhlMlx4OTRceDgwJwogICAgICAgICAgICBwcmludCAnICAgICAgICAgICAgIFx4MWJbMTs5MW1ceGUyXHg5N1x4OGZceGUyXHg5N1x4OGZceGUyXHg5N1x4OGYgXHgxYlsxOzk3bUNSQUNLIFBBS0lTVEFOIFx4MWJbMTs5MW1ceGUyXHg5N1x4OGZceGUyXHg5N1x4OGZceGUyXHg5N1x4OGYnCiAgICAgICAgICAgIHByaW50IDUwICogJ1x4MWJbMTs5NG1ceGUyXHg5NFx4ODAnCiAgICAgICAgICAgIGlkdCA9IHJhd19pbnB1dCgnXHgxYlsxOzk3bXtceDFiWzE7OTFtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzkxbUlEIFB1Ymxpay9UZW1hbiBceDFiWzE7OTFtOlx4MWJbMTs5Mm0gJykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgam9rID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8nICsgaWR0ICsgJz9hY2Nlc3NfdG9rZW49JyArIHRva2V0KQogICAgICAgICAgICAgICAgb3AgPSBqc29uLmxvYWRzKGpvay50ZXh0KQogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbVx4ZTJceDk3XHg4Zlx4MWJbMTs5N219IFx4MWJbMTs5MW1OYW1hIFx4MWJbMTs5MW06XHgxYlsxOzkybSAnICsgb3BbJ25hbWUnXQogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtIVx4MWJbMTs5N219IElEIHB1Ymxpay90ZW1hbiB0aWRhayBhZGEgIScKICAgICAgICAgICAgICAgIHJhd19pbnB1dCgnXG5ceDFiWzE7OTFtW1x4MWJbMTs5N208S2VtYmFsaT5ceDFiWzE7OTFtXScpCiAgICAgICAgICAgICAgICBjcmFja19wYWtpcygpCiAgICAgICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoKICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW0hXHgxYlsxOzk3bX0gVGlkYWsgYWRhIGtvbmVrc2kgIScKICAgICAgICAgICAgICAgIGtlbHVhcigpCgogICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8nICsgaWR0ICsgJy9mcmllbmRzP2FjY2Vzc190b2tlbj0nICsgdG9rZXQpCiAgICAgICAgICAgIHogPSBqc29uLmxvYWRzKHIudGV4dCkKICAgICAgICAgICAgZm9yIGkgaW4gelsnZGF0YSddOgogICAgICAgICAgICAgICAgaWQuYXBwZW5kKGlbJ2lkJ10pCgogICAgICAgIGVsaWYgdGVhayA9PSAnMycgb3IgdGVhayA9PSAnMDMnOgogICAgICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICAgICAgcHJpbnQgbG9nbwogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBwcmludCA1MCAqICdceDFiWzE7OTRtXHhlMlx4OTRceDgwJwogICAgICAgICAgICAgICAgcHJpbnQgJyAgICAgICAgICAgICBceDFiWzE7OTFtXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmIFx4MWJbMTs5N21DUkFDSyBQQUtJU1RBTiBceDFiWzE7OTFtXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmJwogICAgICAgICAgICAgICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgICAgICAgICAgICAgIGlkbGlzdCA9IHJhd19pbnB1dCgnXHgxYlsxOzk3bXtceDFiWzE7OTFtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzkxbU5hbWEgRmlsZVx4MWJbMTs5MW0gOlx4MWJbMTs5Mm0gJykKICAgICAgICAgICAgICAgIGZvciBsaW5lIGluIG9wZW4oaWRsaXN0LCAncicpLnJlYWRsaW5lcygpOgogICAgICAgICAgICAgICAgICAgIGlkLmFwcGVuZChsaW5lLnN0cmlwKCkpCgogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtIVx4MWJbMTs5N219IEZpbGUgdGlkYWsgYWRhICEgJwogICAgICAgICAgICAgICAgcmF3X2lucHV0KCdcblx4MWJbMTs5Mm1bIFx4MWJbMTs5N21LZW1iYWxpIFx4MWJbMTs5Mm1dJykKICAgICAgICAgICAgZXhjZXB0IElPRXJyb3I6CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtIVx4MWJbMTs5N219IEZpbGUgdGlkYWsgYWRhICEnCiAgICAgICAgICAgICAgICByYXdfaW5wdXQoJ1xuXHgxYlsxOzkxbVtceDFiWzE7OTdtPEtlbWJhbGk+XHgxYlsxOzkxbV0nKQogICAgICAgICAgICAgICAgY3JhY2tfcGFraXMoKQoKICAgICAgICBlbGlmIHRlYWsgPT0gJzAnIG9yIHRlYWsgPT0gJzAwJzoKICAgICAgICAgICAgbWVudSgpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbSFceDFiWzE7OTdtfVx4MWJbMTs5N20gSXNpIFlnIEJlbmFyICEnCiAgICAgICAgICAgIHBpbGloX3Bha2lzKCkKICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzkxbVRvdGFsIElEIFx4MWJbMTs5MW06XHgxYlsxOzkybSAnICsgc3RyKGxlbihpZCkpCiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbVx4ZTJceDk3XHg4Zlx4MWJbMTs5N219IFx4MWJbMTs5MW1TdG9wIFRla2FuIENUUkwrWicKICAgICAgICB0aXRpayA9IFsnLiAgICcsICcuLiAgJywgJy4uLiAnXQogICAgICAgIGZvciBvIGluIHRpdGlrOgogICAgICAgICAgICBwcmludCAnXHJceDFiWzE7OTdte1x4MWJbMTs5MW1ceGUyXHg5N1x4OGZceDFiWzE7OTdtfSBceDFiWzE7OTFtQ3JhY2sgQmVyamFsYW4gJyArIG8sCiAgICAgICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgICAgICAgICB0aW1lLnNsZWVwKDEpCgogICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTFtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzkxbUd1bmFrYW4gTW9kZSBQZXNhd2F0IEppa2EgVGlkYWsgQWRhIEhhc2lsJwogICAgcHJpbnQgJ1x4MWJbMTs5NG1ceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODAnCgogICAgZGVmIG1haW4oYXJnKToKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCgnXHJ7fScpLmZvcm1hdChkYXRldGltZS5ub3coKS5zdHJmdGltZSgnXHgxYlsxOzk2bSVIXHgxYlsxOzkxbTpceDFiWzE7OTNtJU1ceDFiWzE7OTFtOlx4MWJbMTs5Mm0lUycpKSkKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB6b3dlID0gYXJnCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcy5ta2RpcignZG9uZScpCiAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgIHBhc3MKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBhbiA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJyArIHpvd2UgKyAnLz9hY2Nlc3NfdG9rZW49JyArIHRva2V0KQogICAgICAgICAgICBqID0ganNvbi5sb2Fkcyhhbi50ZXh0KQogICAgICAgICAgICBib3MxID0galsnZmlyc3RfbmFtZSddLmxvd2VyKCkgKyAnMTIzJwogICAgICAgICAgICBkYXRhID0gdXJsbGliLnVybG9wZW4oJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luP2FjY2Vzc190b2tlbj0yMzc3NTk5MDk1OTE2NTUlMjUyNTdDMGYxNDBhYWJlZGZiNjVhYzI3YTczOWVkMWEyMjYzYjEmZm9ybWF0PWpzb24mc2RrX3ZlcnNpb249MiZlbWFpbD0nICsgem93ZSArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBib3MxICsgJyZzZGs9aW9zJmdlbmVyYXRlX3Nlc3Npb25fY29va2llcz0xJnNpZz0zZjU1NWY5OWZiNjFmY2Q3YWEwYzQ0ZjU4ZjUyMmVmNicpCiAgICAgICAgICAgIGtvID0ganNvbi5sb2FkKGRhdGEpCiAgICAgICAgICAgIGlmICdhY2Nlc3NfdG9rZW4nIGluIGtvOgogICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTJtQkVSSEFTSUwnCiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIHpvd2UKICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTJtJyArIGJvczEKICAgICAgICAgICAgICAgIG9rZSA9IG9wZW4oJ2RvbmUvcGFraXMudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgb2tlLndyaXRlKCdcbntceGMzXHg5N30gQkVSSEFTSUwgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zMSArICdcbicpCiAgICAgICAgICAgICAgICBva2UuY2xvc2UoKQogICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh6b3dlKQogICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBrb1snZXJyb3JfbXNnJ106CiAgICAgICAgICAgICAgICBwcmludCAnXG5ceDFiWzE7OTdte1x4MWJbMTs5MW1ceGMzXHg5N1x4MWJbMTs5N219IFx4MWJbMTs5MW1DRUtQT0lOVCcKICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTFtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5MW0nICsgem93ZQogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbVx4YzNceDk3XHgxYlsxOzk3bX0gUGFzc3dvcmQgIFx4MWJbMTs5MW0+IFx4MWJbMTs5MW0nICsgYm9zMQogICAgICAgICAgICAgICAgY2VrID0gb3BlbignZG9uZS9wYWtpcy50eHQnLCAnYScpCiAgICAgICAgICAgICAgICBjZWsud3JpdGUoJ1xue1x4YzNceDk3fSBDRUtQT0lOVCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3MxICsgJ1xuJykKICAgICAgICAgICAgICAgIGNlay5jbG9zZSgpCiAgICAgICAgICAgICAgICBjZWtwb2ludC5hcHBlbmQoem93ZSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGJvczIgPSBqWydmaXJzdF9uYW1lJ10ubG93ZXIoKSArICcxMjM0JwogICAgICAgICAgICAgICAgZGF0YSA9IHVybGxpYi51cmxvcGVuKCdodHRwczovL2ItYXBpLmZhY2Vib29rLmNvbS9tZXRob2QvYXV0aC5sb2dpbj9hY2Nlc3NfdG9rZW49MjM3NzU5OTA5NTkxNjU1JTI1MjU3QzBmMTQwYWFiZWRmYjY1YWMyN2E3MzllZDFhMjI2M2IxJmZvcm1hdD1qc29uJnNka192ZXJzaW9uPTImZW1haWw9JyArIHpvd2UgKyAnJmxvY2FsZT1lbl9VUyZwYXNzd29yZD0nICsgYm9zMiArICcmc2RrPWlvcyZnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXM9MSZzaWc9M2Y1NTVmOTlmYjYxZmNkN2FhMGM0NGY1OGY1MjJlZjYnKQogICAgICAgICAgICAgICAga28gPSBqc29uLmxvYWQoZGF0YSkKICAgICAgICAgICAgICAgIGlmICdhY2Nlc3NfdG9rZW4nIGluIGtvOgogICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzkybUJFUkhBU0lMJwogICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIHpvd2UKICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzkybScgKyBib3MyCiAgICAgICAgICAgICAgICAgICAgb2tlID0gb3BlbignZG9uZS9wYWtpcy50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgb2tlLndyaXRlKCdcbntceGMzXHg5N30gQkVSSEFTSUwgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zMiArICdcbicpCiAgICAgICAgICAgICAgICAgICAgb2tlLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBrb1snZXJyb3JfbXNnJ106CiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTFtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTFtQ0VLUE9JTlQnCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbVx4YzNceDk3XHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5MW0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5MW0nICsgem93ZQogICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTFtJyArIGJvczIKICAgICAgICAgICAgICAgICAgICBjZWsgPSBvcGVuKCdkb25lL3Bha2lzLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICBjZWsud3JpdGUoJ1xue1x4YzNceDk3fSBDRUtQT0lOVCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3MyICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICBjZWsuY2xvc2UoKQogICAgICAgICAgICAgICAgICAgIGNla3BvaW50LmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBib3MzID0galsnZmlyc3RfbmFtZSddLmxvd2VyKCkgKyAnMTIzNDUnCiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHVybGxpYi51cmxvcGVuKCdodHRwczovL2ItYXBpLmZhY2Vib29rLmNvbS9tZXRob2QvYXV0aC5sb2dpbj9hY2Nlc3NfdG9rZW49MjM3NzU5OTA5NTkxNjU1JTI1MjU3QzBmMTQwYWFiZWRmYjY1YWMyN2E3MzllZDFhMjI2M2IxJmZvcm1hdD1qc29uJnNka192ZXJzaW9uPTImZW1haWw9JyArIHpvd2UgKyAnJmxvY2FsZT1lbl9VUyZwYXNzd29yZD0nICsgYm9zMyArICcmc2RrPWlvcyZnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXM9MSZzaWc9M2Y1NTVmOTlmYjYxZmNkN2FhMGM0NGY1OGY1MjJlZjYnKQogICAgICAgICAgICAgICAgICAgIGtvID0ganNvbi5sb2FkKGRhdGEpCiAgICAgICAgICAgICAgICAgICAgaWYgJ2FjY2Vzc190b2tlbicgaW4ga286CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzkybUJFUkhBU0lMJwogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Mm0nICsgem93ZQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzkybScgKyBib3MzCiAgICAgICAgICAgICAgICAgICAgICAgIG9rZSA9IG9wZW4oJ2RvbmUvcGFraXMudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgICAgICBva2Uud3JpdGUoJ1xue1x4YzNceDk3fSBCRVJIQVNJTCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3MzICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgb2tlLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIGtvWydlcnJvcl9tc2cnXToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTFtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTFtQ0VLUE9JTlQnCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTFtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkxbScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTFtJyArIGJvczMKICAgICAgICAgICAgICAgICAgICAgICAgY2VrID0gb3BlbignZG9uZS9wYWtpcy50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgICAgIGNlay53cml0ZSgnXG57XHhjM1x4OTd9IENFS1BPSU5UIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczMgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICBjZWsuY2xvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICBjZWtwb2ludC5hcHBlbmQoem93ZSkKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBib3M0ID0gJ3Bha2lzdGFuJwogICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gdXJsbGliLnVybG9wZW4oJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luP2FjY2Vzc190b2tlbj0yMzc3NTk5MDk1OTE2NTUlMjUyNTdDMGYxNDBhYWJlZGZiNjVhYzI3YTczOWVkMWEyMjYzYjEmZm9ybWF0PWpzb24mc2RrX3ZlcnNpb249MiZlbWFpbD0nICsgem93ZSArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBib3M0ICsgJyZzZGs9aW9zJmdlbmVyYXRlX3Nlc3Npb25fY29va2llcz0xJnNpZz0zZjU1NWY5OWZiNjFmY2Q3YWEwYzQ0ZjU4ZjUyMmVmNicpCiAgICAgICAgICAgICAgICAgICAgICAgIGtvID0ganNvbi5sb2FkKGRhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdhY2Nlc3NfdG9rZW4nIGluIGtvOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTJtQkVSSEFTSUwnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIHpvd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTJtJyArIGJvczQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rZSA9IG9wZW4oJ2RvbmUvcGFraXMudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tlLndyaXRlKCdcbntceGMzXHg5N30gQkVSSEFTSUwgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zNCArICdcbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBva2UuY2xvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBrb1snZXJyb3JfbXNnJ106CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXG5ceDFiWzE7OTdte1x4MWJbMTs5M21ceGMzXHg5N1x4MWJbMTs5N219IFx4MWJbMTs5MW1DRUtQT0lOVCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTFtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5MW0nICsgem93ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbVx4YzNceDk3XHgxYlsxOzk3bX0gUGFzc3dvcmQgIFx4MWJbMTs5MW0+IFx4MWJbMTs5MW0nICsgYm9zNAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VrID0gb3BlbignZG9uZS9wYWtpcy50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWsud3JpdGUoJ1xue1x4YzNceDk3fSBDRUtQT0lOVCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3M0ICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlay5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWtwb2ludC5hcHBlbmQoem93ZSkKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvczUgPSAnNzg2Nzg2JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHVybGxpYi51cmxvcGVuKCdodHRwczovL2ItYXBpLmZhY2Vib29rLmNvbS9tZXRob2QvYXV0aC5sb2dpbj9hY2Nlc3NfdG9rZW49MjM3NzU5OTA5NTkxNjU1JTI1MjU3QzBmMTQwYWFiZWRmYjY1YWMyN2E3MzllZDFhMjI2M2IxJmZvcm1hdD1qc29uJnNka192ZXJzaW9uPTImZW1haWw9JyArIHpvd2UgKyAnJmxvY2FsZT1lbl9VUyZwYXNzd29yZD0nICsgYm9zNSArICcmc2RrPWlvcyZnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXM9MSZzaWc9M2Y1NTVmOTlmYjYxZmNkN2FhMGM0NGY1OGY1MjJlZjYnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAga28gPSBqc29uLmxvYWQoZGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICdhY2Nlc3NfdG9rZW4nIGluIGtvOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzkybUJFUkhBU0lMJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIHpvd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzkybScgKyBib3M1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tlID0gb3BlbignZG9uZS9wYWtpcy50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tlLndyaXRlKCdcbntceGMzXHg5N30gQkVSSEFTSUwgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zNSArICdcbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tlLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBrb1snZXJyb3JfbXNnJ106CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTFtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTFtQ0VLUE9JTlQnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbVx4YzNceDk3XHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5MW0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5MW0nICsgem93ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTFtJyArIGJvczUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWsgPSBvcGVuKCdkb25lL3Bha2lzLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWsud3JpdGUoJ1xue1x4YzNceDk3fSBDRUtQT0lOVCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3M1ICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWsuY2xvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNla3BvaW50LmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3M2ID0galsnbGFzdF9uYW1lJ10ubG93ZXIoKSArICc3ODYnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHVybGxpYi51cmxvcGVuKCdodHRwczovL2ItYXBpLmZhY2Vib29rLmNvbS9tZXRob2QvYXV0aC5sb2dpbj9hY2Nlc3NfdG9rZW49MjM3NzU5OTA5NTkxNjU1JTI1MjU3QzBmMTQwYWFiZWRmYjY1YWMyN2E3MzllZDFhMjI2M2IxJmZvcm1hdD1qc29uJnNka192ZXJzaW9uPTImZW1haWw9JyArIHpvd2UgKyAnJmxvY2FsZT1lbl9VUyZwYXNzd29yZD0nICsgYm9zNiArICcmc2RrPWlvcyZnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXM9MSZzaWc9M2Y1NTVmOTlmYjYxZmNkN2FhMGM0NGY1OGY1MjJlZjYnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtvID0ganNvbi5sb2FkKGRhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ2FjY2Vzc190b2tlbicgaW4ga286CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzkybUJFUkhBU0lMJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Mm0nICsgem93ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzkybScgKyBib3M2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rZSA9IG9wZW4oJ2RvbmUvcGFraXMudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva2Uud3JpdGUoJ1xue1x4YzNceDk3fSBCRVJIQVNJTCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3M2ICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tlLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIGtvWydlcnJvcl9tc2cnXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTFtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTFtQ0VLUE9JTlQnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTFtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkxbScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTFtJyArIGJvczYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VrID0gb3BlbignZG9uZS9wYWtpcy50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlay53cml0ZSgnXG57XHhjM1x4OTd9IENFS1BPSU5UIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczYgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWsuY2xvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWtwb2ludC5hcHBlbmQoem93ZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3M3ID0galsnbGFzdF9uYW1lJ10ubG93ZXIoKSArICcxMjMnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB1cmxsaWIudXJsb3BlbignaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/YWNjZXNzX3Rva2VuPTIzNzc1OTkwOTU5MTY1NSUyNTI1N0MwZjE0MGFhYmVkZmI2NWFjMjdhNzM5ZWQxYTIyNjNiMSZmb3JtYXQ9anNvbiZzZGtfdmVyc2lvbj0yJmVtYWlsPScgKyB6b3dlICsgJyZsb2NhbGU9ZW5fVVMmcGFzc3dvcmQ9JyArIGJvczcgKyAnJnNkaz1pb3MmZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzPTEmc2lnPTNmNTU1Zjk5ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWY2JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga28gPSBqc29uLmxvYWQoZGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ2FjY2Vzc190b2tlbicgaW4ga286CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXG5ceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFx4MWJbMTs5Mm1CRVJIQVNJTCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Mm0nICsgem93ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gUGFzc3dvcmQgIFx4MWJbMTs5MW0+IFx4MWJbMTs5Mm0nICsgYm9zNwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tlID0gb3BlbignZG9uZS9wYWtpcy50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva2Uud3JpdGUoJ1xue1x4YzNceDk3fSBCRVJIQVNJTCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3M3ICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rZS5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIGtvWydlcnJvcl9tc2cnXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzkxbVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzkxbUNFS1BPSU5UJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbVx4YzNceDk3XHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5MW0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkxbScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzkxbScgKyBib3M3CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWsgPSBvcGVuKCdkb25lL3Bha2lzLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlay53cml0ZSgnXG57XHhjM1x4OTd9IENFS1BPSU5UIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczcgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VrLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNla3BvaW50LmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9zOCA9IGpbJ2xhc3RfbmFtZSddLmxvd2VyKCkgKyAnMTIzNCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB1cmxsaWIudXJsb3BlbignaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/YWNjZXNzX3Rva2VuPTIzNzc1OTkwOTU5MTY1NSUyNTI1N0MwZjE0MGFhYmVkZmI2NWFjMjdhNzM5ZWQxYTIyNjNiMSZmb3JtYXQ9anNvbiZzZGtfdmVyc2lvbj0yJmVtYWlsPScgKyB6b3dlICsgJyZsb2NhbGU9ZW5fVVMmcGFzc3dvcmQ9JyArIGJvczggKyAnJnNkaz1pb3MmZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzPTEmc2lnPTNmNTU1Zjk5ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWY2JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtvID0ganNvbi5sb2FkKGRhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBrbzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXG5ceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFx4MWJbMTs5Mm1CRVJIQVNJTCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gUGFzc3dvcmQgIFx4MWJbMTs5MW0+IFx4MWJbMTs5Mm0nICsgYm9zOAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rZSA9IG9wZW4oJ2RvbmUvcGFraXMudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rZS53cml0ZSgnXG57XHhjM1x4OTd9IEJFUkhBU0lMIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczggKyAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rZS5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4ga29bJ2Vycm9yX21zZyddOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzkxbVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzkzbUNFS1BPSU5UJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTFtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTFtJyArIHpvd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzkxbScgKyBib3M4CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VrID0gb3BlbignZG9uZS9wYWtpcy50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VrLndyaXRlKCdcbntceGMzXHg5N30gQ0VLUE9JTlQgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zOCArICdcbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VrLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWtwb2ludC5hcHBlbmQoem93ZSkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHBhc3MKCiAgICBwID0gVGhyZWFkUG9vbCgzMCkKICAgIHAubWFwKG1haW4sIGlkKQogICAgcHJpbnQgJ1xuXHgxYlsxOzk0bVx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MCcKICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW1ceGUyXHg5N1x4OGZceDFiWzE7OTdtfSBceDFiWzE7OTFtU2VsZXNhaSAuLi4nCiAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzkxbVRvdGFsIFx4MWJbMTs5Mm1PS1x4MWJbMTs5N20vXHgxYlsxOzkxbUNQIFx4MWJbMTs5N206IFx4MWJbMTs5Mm0nICsgc3RyKGxlbihva3MpKSArICdceDFiWzE7OTdtL1x4MWJbMTs5MW0nICsgc3RyKGxlbihjZWtwb2ludCkpCiAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzkybU9LXHgxYlsxOzk3bS9ceDFiWzE7OTFtQ1AgXHgxYlsxOzkxbWZpbGUgdGVyc2ltcGFuIFx4MWJbMTs5MW06IFx4MWJbMTs5Mm1kb25lL3Bha2lzLnR4dCcKICAgIHByaW50IDUwICogJ1x4MWJbMTs5NG1ceGUyXHg5NFx4ODAnCiAgICByYXdfaW5wdXQoJ1x4MWJbMTs5N217PFx4MWJbMTs5MW1LZW1iYWxpXHgxYlsxOzk3bT59JykKICAgIG9zLnN5c3RlbSgncHl0aG9uMiB5b3NoaS5weScpCgoKZGVmIGNyYWNrX2xpa2VzKCk6CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHRyeToKICAgICAgICB0b2tldCA9IG9wZW4oJ2xvZ2luLnR4dCcsICdyJykucmVhZCgpCiAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICBwcmludCAnXHgxYlsxOzk3bVshXSBUb2tlbiBpbnZhbGlkJwogICAgICAgIG9zLnN5c3RlbSgncm0gLXJmIGxvZ2luLnR4dCcpCiAgICAgICAgdGltZS5zbGVlcCgwLjAxKQogICAgICAgIGxvZ2luKCkKCiAgICB0cnk6CiAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgcHJpbnQgbG9nbwogICAgICAgIHByaW50IDUwICogJ1x4MWJbMTs5NG1ceGUyXHg5NFx4ODAnCiAgICAgICAgcHJpbnQgJyAgICAgICAgXHgxYlsxOzk2bVx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4ZiBceDFiWzE7OTdtQ1JBQ0sgUE9TVElOR0FOIEdSVVAvVEVNQU5ceDFiWzE7OTZtIFx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4ZicKICAgICAgICBwcmludCA1MCAqICdceDFiWzE7OTRtXHhlMlx4OTRceDgwJwogICAgICAgIHRleiA9IHJhd19pbnB1dCgnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX1ceDFiWzE7OTZtIElEIFBvc3RpbmdhbiBHcm91cC9UZW1hbiBceDFiWzE7OTFtIDpceDFiWzE7OTJtICcpCiAgICAgICAgciA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJyArIHRleiArICcvbGlrZXM/bGltaXQ9OTk5OTk5OSZhY2Nlc3NfdG9rZW49JyArIHRva2V0KQogICAgICAgIHogPSBqc29uLmxvYWRzKHIudGV4dCkKICAgICAgICBmb3IgaSBpbiB6WydkYXRhJ106CiAgICAgICAgICAgIGlkLmFwcGVuZChpWydpZCddKQoKICAgICAgICBqYWxhbignXHJceDFiWzE7OTdte1x4MWJbMTs5Nm1ceGUyXHg5N1x4OGZceDFiWzE7OTdtfSBceDFiWzE7OTZtTWVuZ2FtYmlsIElEIFx4MWJbMTs5N20uLi4nKQogICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5MW0hXHgxYlsxOzk3bX0gSUQgUG9zdGluZ2FuIFNhbGFoICEnCiAgICAgICAgcmF3X2lucHV0KCdcblx4MWJbMTs5Nm1bPFx4MWJbMTs5N21LZW1iYWxpPlx4MWJbMTs5Nm1dJykKICAgICAgICBtZW51KCkKCiAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzk2bVRvdGFsIElEIFx4MWJbMTs5MW06XHgxYlsxOzkybSAnICsgc3RyKGxlbihpZCkpCiAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzk2bVN0b3AgVGVrYW4gQ1RSTCtaJwogICAgdGl0aWsgPSBbJy4gICAnLCAnLi4gICcsICcuLi4gJ10KICAgIGZvciBvIGluIHRpdGlrOgogICAgICAgIHByaW50ICdcclx4MWJbMTs5N217XHgxYlsxOzk2bVx4ZTJceDk3XHg4Zlx4MWJbMTs5N219IFx4MWJbMTs5Nm1DcmFjayBCZXJqYWxhbiAnICsgbywKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB0aW1lLnNsZWVwKDEpCgogICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzk2bUd1bmFrYW4gTW9kZSBQZXNhd2F0IEppa2EgVGlkYWsgQWRhIEhhc2lsJwogICAgcHJpbnQgJ1x4MWJbMTs5NG1ceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODAnCgogICAgZGVmIG1haW4oYXJnKToKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCgnXHJ7fScpLmZvcm1hdChkYXRldGltZS5ub3coKS5zdHJmdGltZSgnXHgxYlsxOzk2bSVIXHgxYlsxOzkxbTpceDFiWzE7OTNtJU1ceDFiWzE7OTFtOlx4MWJbMTs5Mm0lUycpKSkKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB6b3dlID0gYXJnCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcy5ta2RpcignZG9uZScpCiAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgIHBhc3MKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBhbiA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJyArIHpvd2UgKyAnLz9hY2Nlc3NfdG9rZW49JyArIHRva2V0KQogICAgICAgICAgICBqID0ganNvbi5sb2Fkcyhhbi50ZXh0KQogICAgICAgICAgICBib3MxID0galsnZmlyc3RfbmFtZSddLmxvd2VyKCkgKyAnMTIzJwogICAgICAgICAgICBkYXRhID0gdXJsbGliLnVybG9wZW4oJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luP2FjY2Vzc190b2tlbj0yMzc3NTk5MDk1OTE2NTUlMjUyNTdDMGYxNDBhYWJlZGZiNjVhYzI3YTczOWVkMWEyMjYzYjEmZm9ybWF0PWpzb24mc2RrX3ZlcnNpb249MiZlbWFpbD0nICsgem93ZSArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBib3MxICsgJyZzZGs9aW9zJmdlbmVyYXRlX3Nlc3Npb25fY29va2llcz0xJnNpZz0zZjU1NWY5OWZiNjFmY2Q3YWEwYzQ0ZjU4ZjUyMmVmNicpCiAgICAgICAgICAgIGtvID0ganNvbi5sb2FkKGRhdGEpCiAgICAgICAgICAgIGlmICdhY2Nlc3NfdG9rZW4nIGluIGtvOgogICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTJtQkVSSEFTSUwnCiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIHpvd2UKICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTJtJyArIGJvczEKICAgICAgICAgICAgICAgIG9rZSA9IG9wZW4oJ2RvbmUvZ3J1cC50eHQnLCAnYScpCiAgICAgICAgICAgICAgICBva2Uud3JpdGUoJ1xue1x4YzNceDk3fSBCRVJIQVNJTCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3MxICsgJ1xuJykKICAgICAgICAgICAgICAgIG9rZS5jbG9zZSgpCiAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIGtvWydlcnJvcl9tc2cnXToKICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzk2bVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzk2bUNFS1BPSU5UJwogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk2bVx4YzNceDk3XHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Nm0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzk2bScgKyB6b3dlCiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzk2bScgKyBib3MxCiAgICAgICAgICAgICAgICBjZWsgPSBvcGVuKCdkb25lL2dydXAudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgY2VrLndyaXRlKCdcbntceGMzXHg5N30gQ0VLUE9JTlQgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zMSArICdcbicpCiAgICAgICAgICAgICAgICBjZWsuY2xvc2UoKQogICAgICAgICAgICAgICAgY2VrcG9pbnQuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBib3MyID0galsnZmlyc3RfbmFtZSddLmxvd2VyKCkgKyAnMTIzNCcKICAgICAgICAgICAgICAgIGRhdGEgPSB1cmxsaWIudXJsb3BlbignaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/YWNjZXNzX3Rva2VuPTIzNzc1OTkwOTU5MTY1NSUyNTI1N0MwZjE0MGFhYmVkZmI2NWFjMjdhNzM5ZWQxYTIyNjNiMSZmb3JtYXQ9anNvbiZzZGtfdmVyc2lvbj0yJmVtYWlsPScgKyB6b3dlICsgJyZsb2NhbGU9ZW5fVVMmcGFzc3dvcmQ9JyArIGJvczIgKyAnJnNkaz1pb3MmZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzPTEmc2lnPTNmNTU1Zjk5ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWY2JykKICAgICAgICAgICAgICAgIGtvID0ganNvbi5sb2FkKGRhdGEpCiAgICAgICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBrbzoKICAgICAgICAgICAgICAgICAgICBwcmludCAnXG5ceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFx4MWJbMTs5Mm1CRVJIQVNJTCcKICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gUGFzc3dvcmQgIFx4MWJbMTs5MW0+IFx4MWJbMTs5Mm0nICsgYm9zMgogICAgICAgICAgICAgICAgICAgIG9rZSA9IG9wZW4oJ2RvbmUvZ3J1cC50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgb2tlLndyaXRlKCdcbntceGMzXHg5N30gQkVSSEFTSUwgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zMiArICdcbicpCiAgICAgICAgICAgICAgICAgICAgb2tlLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBrb1snZXJyb3JfbXNnJ106CiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTZtQ0VLUE9JTlQnCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk2bVx4YzNceDk3XHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Nm0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk2bVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Nm0nICsgem93ZQogICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Nm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTZtJyArIGJvczIKICAgICAgICAgICAgICAgICAgICBjZWsgPSBvcGVuKCdkb25lL2dydXAudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgIGNlay53cml0ZSgnXG57XHhjM1x4OTd9IENFS1BPSU5UIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczIgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgIGNlay5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgY2VrcG9pbnQuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGJvczMgPSBqWydmaXJzdF9uYW1lJ10ubG93ZXIoKSArICcxMjM0NScKICAgICAgICAgICAgICAgICAgICBkYXRhID0gdXJsbGliLnVybG9wZW4oJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luP2FjY2Vzc190b2tlbj0yMzc3NTk5MDk1OTE2NTUlMjUyNTdDMGYxNDBhYWJlZGZiNjVhYzI3YTczOWVkMWEyMjYzYjEmZm9ybWF0PWpzb24mc2RrX3ZlcnNpb249MiZlbWFpbD0nICsgem93ZSArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBib3MzICsgJyZzZGs9aW9zJmdlbmVyYXRlX3Nlc3Npb25fY29va2llcz0xJnNpZz0zZjU1NWY5OWZiNjFmY2Q3YWEwYzQ0ZjU4ZjUyMmVmNicpCiAgICAgICAgICAgICAgICAgICAga28gPSBqc29uLmxvYWQoZGF0YSkKICAgICAgICAgICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBrbzoKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTJtQkVSSEFTSUwnCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTJtJyArIGJvczMKICAgICAgICAgICAgICAgICAgICAgICAgb2tlID0gb3BlbignZG9uZS9ncnVwLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgb2tlLndyaXRlKCdcbntceGMzXHg5N30gQkVSSEFTSUwgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zMyArICdcbicpCiAgICAgICAgICAgICAgICAgICAgICAgIG9rZS5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoem93ZSkKICAgICAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBrb1snZXJyb3JfbXNnJ106CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzk2bVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzk2bUNFS1BPSU5UJwogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzk2bScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk2bVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Nm0nICsgem93ZQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzk2bScgKyBib3MzCiAgICAgICAgICAgICAgICAgICAgICAgIGNlayA9IG9wZW4oJ2RvbmUvZ3J1cC50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgICAgIGNlay53cml0ZSgnXG57XHhjM1x4OTd9IENFS1BPSU5UIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczMgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICBjZWsuY2xvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICBjZWtwb2ludC5hcHBlbmQoem93ZSkKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBib3M0ID0galsnbGFzdF9uYW1lJ10ubG93ZXIoKSArICcxMjMnCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB1cmxsaWIudXJsb3BlbignaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/YWNjZXNzX3Rva2VuPTIzNzc1OTkwOTU5MTY1NSUyNTI1N0MwZjE0MGFhYmVkZmI2NWFjMjdhNzM5ZWQxYTIyNjNiMSZmb3JtYXQ9anNvbiZzZGtfdmVyc2lvbj0yJmVtYWlsPScgKyB6b3dlICsgJyZsb2NhbGU9ZW5fVVMmcGFzc3dvcmQ9JyArIGJvczQgKyAnJnNkaz1pb3MmZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzPTEmc2lnPTNmNTU1Zjk5ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWY2JykKICAgICAgICAgICAgICAgICAgICAgICAga28gPSBqc29uLmxvYWQoZGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ2FjY2Vzc190b2tlbicgaW4ga286CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXG5ceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFx4MWJbMTs5Mm1CRVJIQVNJTCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Mm0nICsgem93ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gUGFzc3dvcmQgIFx4MWJbMTs5MW0+IFx4MWJbMTs5Mm0nICsgYm9zNAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tlID0gb3BlbignZG9uZS9ncnVwLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rZS53cml0ZSgnXG57XHhjM1x4OTd9IEJFUkhBU0lMIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczQgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tlLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoem93ZSkKICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4ga29bJ2Vycm9yX21zZyddOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTZtQ0VLUE9JTlQnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzk2bScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Nm1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTZtJyArIHpvd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Nm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTZtJyArIGJvczQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlayA9IG9wZW4oJ2RvbmUvZ3J1cC50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWsud3JpdGUoJ1xue1x4YzNceDk3fSBDRUtQT0lOVCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3M0ICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlay5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWtwb2ludC5hcHBlbmQoem93ZSkKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvczUgPSBqWydsYXN0X25hbWUnXS5sb3dlcigpICsgJzEyMzQnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gdXJsbGliLnVybG9wZW4oJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luP2FjY2Vzc190b2tlbj0yMzc3NTk5MDk1OTE2NTUlMjUyNTdDMGYxNDBhYWJlZGZiNjVhYzI3YTczOWVkMWEyMjYzYjEmZm9ybWF0PWpzb24mc2RrX3ZlcnNpb249MiZlbWFpbD0nICsgem93ZSArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBib3M1ICsgJyZzZGs9aW9zJmdlbmVyYXRlX3Nlc3Npb25fY29va2llcz0xJnNpZz0zZjU1NWY5OWZiNjFmY2Q3YWEwYzQ0ZjU4ZjUyMmVmNicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrbyA9IGpzb24ubG9hZChkYXRhKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ2FjY2Vzc190b2tlbicgaW4ga286CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTJtQkVSSEFTSUwnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Mm0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Mm0nICsgem93ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTJtJyArIGJvczUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva2UgPSBvcGVuKCdkb25lL2dydXAudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rZS53cml0ZSgnXG57XHhjM1x4OTd9IEJFUkhBU0lMIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczUgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rZS5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4ga29bJ2Vycm9yX21zZyddOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzk2bVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzk2bUNFS1BPSU5UJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Nm1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTZtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Nm1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTZtJyArIHpvd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzk2bScgKyBib3M1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VrID0gb3BlbignZG9uZS9ncnVwLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWsud3JpdGUoJ1xue1x4YzNceDk3fSBDRUtQT0lOVCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3M1ICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWsuY2xvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNla3BvaW50LmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3M2ID0galsnbGFzdF9uYW1lJ10ubG93ZXIoKSArICcxMjM0NScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gdXJsbGliLnVybG9wZW4oJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luP2FjY2Vzc190b2tlbj0yMzc3NTk5MDk1OTE2NTUlMjUyNTdDMGYxNDBhYWJlZGZiNjVhYzI3YTczOWVkMWEyMjYzYjEmZm9ybWF0PWpzb24mc2RrX3ZlcnNpb249MiZlbWFpbD0nICsgem93ZSArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBib3M2ICsgJyZzZGs9aW9zJmdlbmVyYXRlX3Nlc3Npb25fY29va2llcz0xJnNpZz0zZjU1NWY5OWZiNjFmY2Q3YWEwYzQ0ZjU4ZjUyMmVmNicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga28gPSBqc29uLmxvYWQoZGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBrbzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTJtQkVSSEFTSUwnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTJtJyArIGJvczYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tlID0gb3BlbignZG9uZS9ncnVwLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tlLndyaXRlKCdcbntceGMzXHg5N30gQkVSSEFTSUwgXG57XHhjM1x4OTd9IE5hbWEgICAgID4gJyArIGpbJ25hbWUnXSArICdcbntceGMzXHg5N30gVXNlciAgICAgPiAnICsgem93ZSArICdcbntceGMzXHg5N30gUGFzc3dvcmQgPiAnICsgYm9zNiArICdcbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rZS5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoem93ZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBrb1snZXJyb3JfbXNnJ106CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzk2bVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzk2bUNFS1BPSU5UJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzk2bScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk2bVx4YzNceDk3XHgxYlsxOzk3bX0gVXNlciAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Nm0nICsgem93ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzk2bScgKyBib3M2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlayA9IG9wZW4oJ2RvbmUvZ3J1cC50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlay53cml0ZSgnXG57XHhjM1x4OTd9IENFS1BPSU5UIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczYgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWsuY2xvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWtwb2ludC5hcHBlbmQoem93ZSkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHBhc3MKCiAgICBwID0gVGhyZWFkUG9vbCgzMCkKICAgIHAubWFwKG1haW4sIGlkKQogICAgcHJpbnQgJ1xuXHgxYlsxOzk0bVx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MCcKICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Nm1ceGUyXHg5N1x4OGZceDFiWzE7OTdtfSBceDFiWzE7OTZtU2VsZXNhaSAuLi4nCiAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzk2bVRvdGFsIFx4MWJbMTs5Mm1PS1x4MWJbMTs5N20vXHgxYlsxOzk2bUNQIFx4MWJbMTs5N206IFx4MWJbMTs5Mm0nICsgc3RyKGxlbihva3MpKSArICdceDFiWzE7OTdtL1x4MWJbMTs5Nm0nICsgc3RyKGxlbihjZWtwb2ludCkpCiAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTZtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzkybU9LXHgxYlsxOzk3bS9ceDFiWzE7OTZtQ1AgXHgxYlsxOzk2bWZpbGUgdGVyc2ltcGFuIFx4MWJbMTs5MW06IFx4MWJbMTs5Mm1kb25lL2dydXAudHh0JwogICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgIHJhd19pbnB1dCgnXHgxYlsxOzk3bXs8XHgxYlsxOzk2bUtlbWJhbGlceDFiWzE7OTdtPn0nKQogICAgb3Muc3lzdGVtKCdweXRob24yIHlvc2hpLnB5JykKCgpkZWYgY3JhY2tfZm9sbG93KCk6CiAgICB0b2tldCA9IG9wZW4oJ2xvZ2luLnR4dCcsICdyJykucmVhZCgpCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHByaW50IGxvZ28KICAgIHByaW50IDUwICogJ1x4MWJbMTs5NG1ceGUyXHg5NFx4ODAnCiAgICBwcmludCAnICAgICAgICAgICAgICBceDFiWzE7OTVtXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmXHhlMlx4OTdceDhmIFx4MWJbMTs5N21DUkFDSyBGT0xMT1dFUlMgXHgxYlsxOzk1bVx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4Zlx4ZTJceDk3XHg4ZicKICAgIHByaW50IDUwICogJ1x4MWJbMTs5NG1ceGUyXHg5NFx4ODAnCiAgICBpZHQgPSByYXdfaW5wdXQoJ1x4MWJbMTs5N217XHgxYlsxOzk1bVx4ZTJceDk3XHg4Zlx4MWJbMTs5N219IFx4MWJbMTs5NW1JRCBQdWJsaWsvVGVtYW4gXHgxYlsxOzkxbTpceDFiWzE7OTJtICcpCiAgICB0cnk6CiAgICAgICAgam9rID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8nICsgaWR0ICsgJz9hY2Nlc3NfdG9rZW49JyArIHRva2V0KQogICAgICAgIG9wID0ganNvbi5sb2Fkcyhqb2sudGV4dCkKICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzk1bU5hbWEgXHgxYlsxOzkxbTpceDFiWzE7OTJtICcgKyBvcFsnbmFtZSddCiAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkxbSFceDFiWzE7OTdtfSBJRCBwdWJsaWsvdGVtYW4gdGlkYWsgYWRhICEnCiAgICAgICAgcmF3X2lucHV0KCdcblx4MWJbMTs5NW1bXHgxYlsxOzk3bTxLZW1iYWxpPlx4MWJbMTs5NW1dJykKICAgICAgICBtZW51KCkKICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoKICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTFtIVx4MWJbMTs5N219IFRpZGFrIGFkYSBrb25la3NpICEnCiAgICAgICAga2VsdWFyKCkKCiAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8nICsgaWR0ICsgJy9zdWJzY3JpYmVycz9saW1pdD05OTk5OTkmYWNjZXNzX3Rva2VuPScgKyB0b2tldCkKICAgIHogPSBqc29uLmxvYWRzKHIudGV4dCkKICAgIGZvciBpIGluIHpbJ2RhdGEnXToKICAgICAgICBpZC5hcHBlbmQoaVsnaWQnXSkKCiAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzk1bVRvdGFsIElEIEZvbGxvd2VycyBceDFiWzE7OTFtOlx4MWJbMTs5Mm0gJyArIHN0cihsZW4oaWQpKQogICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk1bVx4ZTJceDk3XHg4Zlx4MWJbMTs5N219IFx4MWJbMTs5NW1TdG9wIFRla2FuIENUUkwrWicKICAgIHRpdGlrID0gWycuICAgJywgJy4uICAnLCAnLi4uICddCiAgICBmb3IgbyBpbiB0aXRpazoKICAgICAgICBwcmludCAnXHJceDFiWzE7OTdte1x4MWJbMTs5NW1ceGUyXHg5N1x4OGZceDFiWzE7OTdtfSBceDFiWzE7OTVtQ3JhY2sgQmVyamFsYW4gJyArIG8sCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgdGltZS5zbGVlcCgxKQoKICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzk1bVx4ZTJceDk3XHg4Zlx4MWJbMTs5N219IFx4MWJbMTs5NW1HdW5ha2FuIE1vZGUgUGVzYXdhdCBKaWthIFRpZGFrIEFkYSBIYXNpbCcKICAgIHByaW50ICdceDFiWzE7OTRtXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwJwoKICAgIGRlZiBtYWluKGFyZyk6CiAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgoJ1xye30nKS5mb3JtYXQoZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoJ1x4MWJbMTs5Nm0lSFx4MWJbMTs5MW06XHgxYlsxOzkzbSVNXHgxYlsxOzkxbTpceDFiWzE7OTJtJVMnKSkpCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgem93ZSA9IGFyZwogICAgICAgIHRyeToKICAgICAgICAgICAgb3MubWtkaXIoJ2RvbmUnKQogICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICBwYXNzCgogICAgICAgIHRyeToKICAgICAgICAgICAgYW4gPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLycgKyB6b3dlICsgJy8/YWNjZXNzX3Rva2VuPScgKyB0b2tldCkKICAgICAgICAgICAgaiA9IGpzb24ubG9hZHMoYW4udGV4dCkKICAgICAgICAgICAgYm9zMSA9IGpbJ2ZpcnN0X25hbWUnXS5sb3dlcigpICsgJzEyMycKICAgICAgICAgICAgZGF0YSA9IHVybGxpYi51cmxvcGVuKCdodHRwczovL2ItYXBpLmZhY2Vib29rLmNvbS9tZXRob2QvYXV0aC5sb2dpbj9hY2Nlc3NfdG9rZW49MjM3NzU5OTA5NTkxNjU1JTI1MjU3QzBmMTQwYWFiZWRmYjY1YWMyN2E3MzllZDFhMjI2M2IxJmZvcm1hdD1qc29uJnNka192ZXJzaW9uPTImZW1haWw9JyArIHpvd2UgKyAnJmxvY2FsZT1lbl9VUyZwYXNzd29yZD0nICsgYm9zMSArICcmc2RrPWlvcyZnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXM9MSZzaWc9M2Y1NTVmOTlmYjYxZmNkN2FhMGM0NGY1OGY1MjJlZjYnKQogICAgICAgICAgICBrbyA9IGpzb24ubG9hZChkYXRhKQogICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBrbzoKICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzkybUJFUkhBU0lMJwogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5Mm0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyB6b3dlCiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzkybScgKyBib3MxCiAgICAgICAgICAgICAgICBva2UgPSBvcGVuKCdkb25lL2ZvbGxvdy50eHQnLCAnYScpCiAgICAgICAgICAgICAgICBva2Uud3JpdGUoJ1xue1x4YzNceDk3fSBCRVJIQVNJTCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3MxICsgJ1xuJykKICAgICAgICAgICAgICAgIG9rZS5jbG9zZSgpCiAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIGtvWydlcnJvcl9tc2cnXToKICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzk1bVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzk1bUNFS1BPSU5UJwogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk1bVx4YzNceDk3XHgxYlsxOzk3bX0gTmFtYSAgXHgxYlsxOzkxbSAgICA+IFx4MWJbMTs5NW0nICsgalsnbmFtZSddCiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzk1bScgKyB6b3dlCiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzk1bScgKyBib3MxCiAgICAgICAgICAgICAgICBjZWsgPSBvcGVuKCdkb25lL2ZvbGxvdy50eHQnLCAnYScpCiAgICAgICAgICAgICAgICBjZWsud3JpdGUoJ1xue1x4YzNceDk3fSBDRUtQT0lOVCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3MxICsgJ1xuJykKICAgICAgICAgICAgICAgIGNlay5jbG9zZSgpCiAgICAgICAgICAgICAgICBjZWtwb2ludC5hcHBlbmQoem93ZSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGJvczIgPSBqWydmaXJzdF9uYW1lJ10ubG93ZXIoKSArICcxMjM0JwogICAgICAgICAgICAgICAgZGF0YSA9IHVybGxpYi51cmxvcGVuKCdodHRwczovL2ItYXBpLmZhY2Vib29rLmNvbS9tZXRob2QvYXV0aC5sb2dpbj9hY2Nlc3NfdG9rZW49MjM3NzU5OTA5NTkxNjU1JTI1MjU3QzBmMTQwYWFiZWRmYjY1YWMyN2E3MzllZDFhMjI2M2IxJmZvcm1hdD1qc29uJnNka192ZXJzaW9uPTImZW1haWw9JyArIHpvd2UgKyAnJmxvY2FsZT1lbl9VUyZwYXNzd29yZD0nICsgYm9zMiArICcmc2RrPWlvcyZnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXM9MSZzaWc9M2Y1NTVmOTlmYjYxZmNkN2FhMGM0NGY1OGY1MjJlZjYnKQogICAgICAgICAgICAgICAga28gPSBqc29uLmxvYWQoZGF0YSkKICAgICAgICAgICAgICAgIGlmICdhY2Nlc3NfdG9rZW4nIGluIGtvOgogICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzkybUJFUkhBU0lMJwogICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIHpvd2UKICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzkybScgKyBib3MyCiAgICAgICAgICAgICAgICAgICAgb2tlID0gb3BlbignZG9uZS9mb2xsb3cudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgIG9rZS53cml0ZSgnXG57XHhjM1x4OTd9IEJFUkhBU0lMIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczIgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgIG9rZS5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4ga29bJ2Vycm9yX21zZyddOgogICAgICAgICAgICAgICAgICAgIHByaW50ICdcblx4MWJbMTs5N217XHgxYlsxOzk1bVx4YzNceDk3XHgxYlsxOzk3bX0gXHgxYlsxOzk1bUNFS1BPSU5UJwogICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5NW1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTVtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5NW1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTVtJyArIHpvd2UKICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBQYXNzd29yZCAgXHgxYlsxOzkxbT4gXHgxYlsxOzk1bScgKyBib3MyCiAgICAgICAgICAgICAgICAgICAgY2VrID0gb3BlbignZG9uZS9mb2xsb3cudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgIGNlay53cml0ZSgnXG57XHhjM1x4OTd9IENFS1BPSU5UIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczIgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgIGNlay5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgY2VrcG9pbnQuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGJvczMgPSBqWydmaXJzdF9uYW1lJ10ubG93ZXIoKSArICcxMjM0NScKICAgICAgICAgICAgICAgICAgICBkYXRhID0gdXJsbGliLnVybG9wZW4oJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luP2FjY2Vzc190b2tlbj0yMzc3NTk5MDk1OTE2NTUlMjUyNTdDMGYxNDBhYWJlZGZiNjVhYzI3YTczOWVkMWEyMjYzYjEmZm9ybWF0PWpzb24mc2RrX3ZlcnNpb249MiZlbWFpbD0nICsgem93ZSArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBib3MzICsgJyZzZGs9aW9zJmdlbmVyYXRlX3Nlc3Npb25fY29va2llcz0xJnNpZz0zZjU1NWY5OWZiNjFmY2Q3YWEwYzQ0ZjU4ZjUyMmVmNicpCiAgICAgICAgICAgICAgICAgICAga28gPSBqc29uLmxvYWQoZGF0YSkKICAgICAgICAgICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBrbzoKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTJtQkVSSEFTSUwnCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTJtJyArIGJvczMKICAgICAgICAgICAgICAgICAgICAgICAgb2tlID0gb3BlbignZG9uZS9mb2xsb3cudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgICAgICBva2Uud3JpdGUoJ1xue1x4YzNceDk3fSBCRVJIQVNJTCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3MzICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgb2tlLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIGtvWydlcnJvcl9tc2cnXToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTVtQ0VLUE9JTlQnCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5NW1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTVtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzk1bScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5NW1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTVtJyArIGJvczMKICAgICAgICAgICAgICAgICAgICAgICAgY2VrID0gb3BlbignZG9uZS9mb2xsb3cudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgICAgICBjZWsud3JpdGUoJ1xue1x4YzNceDk3fSBDRUtQT0lOVCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3MzICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgY2VrLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgY2VrcG9pbnQuYXBwZW5kKHpvd2UpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgYm9zNCA9IGpbJ2xhc3RfbmFtZSddLmxvd2VyKCkgKyAnMTIzJwogICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gdXJsbGliLnVybG9wZW4oJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luP2FjY2Vzc190b2tlbj0yMzc3NTk5MDk1OTE2NTUlMjUyNTdDMGYxNDBhYWJlZGZiNjVhYzI3YTczOWVkMWEyMjYzYjEmZm9ybWF0PWpzb24mc2RrX3ZlcnNpb249MiZlbWFpbD0nICsgem93ZSArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBib3M0ICsgJyZzZGs9aW9zJmdlbmVyYXRlX3Nlc3Npb25fY29va2llcz0xJnNpZz0zZjU1NWY5OWZiNjFmY2Q3YWEwYzQ0ZjU4ZjUyMmVmNicpCiAgICAgICAgICAgICAgICAgICAgICAgIGtvID0ganNvbi5sb2FkKGRhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdhY2Nlc3NfdG9rZW4nIGluIGtvOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTJtQkVSSEFTSUwnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIHpvd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTJtJyArIGJvczQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rZSA9IG9wZW4oJ2RvbmUvZm9sbG93LnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rZS53cml0ZSgnXG57XHhjM1x4OTd9IEJFUkhBU0lMIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczQgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tlLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoem93ZSkKICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4ga29bJ2Vycm9yX21zZyddOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTVtQ0VLUE9JTlQnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzk1bScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5NW1ceGMzXHg5N1x4MWJbMTs5N219IFVzZXIgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTVtJyArIHpvd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5NW1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTVtJyArIGJvczQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlayA9IG9wZW4oJ2RvbmUvZm9sbG93LnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlay53cml0ZSgnXG57XHhjM1x4OTd9IENFS1BPSU5UIFxue1x4YzNceDk3fSBOYW1hICAgICA+ICcgKyBqWyduYW1lJ10gKyAnXG57XHhjM1x4OTd9IFVzZXIgICAgID4gJyArIHpvd2UgKyAnXG57XHhjM1x4OTd9IFBhc3N3b3JkID4gJyArIGJvczQgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VrLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNla3BvaW50LmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9zNSA9IGpbJ2xhc3RfbmFtZSddLmxvd2VyKCkgKyAnMTIzNCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB1cmxsaWIudXJsb3BlbignaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/YWNjZXNzX3Rva2VuPTIzNzc1OTkwOTU5MTY1NSUyNTI1N0MwZjE0MGFhYmVkZmI2NWFjMjdhNzM5ZWQxYTIyNjNiMSZmb3JtYXQ9anNvbiZzZGtfdmVyc2lvbj0yJmVtYWlsPScgKyB6b3dlICsgJyZsb2NhbGU9ZW5fVVMmcGFzc3dvcmQ9JyArIGJvczUgKyAnJnNkaz1pb3MmZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzPTEmc2lnPTNmNTU1Zjk5ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWY2JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtvID0ganNvbi5sb2FkKGRhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBrbzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXG5ceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFx4MWJbMTs5Mm1CRVJIQVNJTCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzkybVx4YzNceDk3XHgxYlsxOzk3bX0gUGFzc3dvcmQgIFx4MWJbMTs5MW0+IFx4MWJbMTs5Mm0nICsgYm9zNQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rZSA9IG9wZW4oJ2RvbmUvZm9sbG93LnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva2Uud3JpdGUoJ1xue1x4YzNceDk3fSBCRVJIQVNJTCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3M1ICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva2UuY2xvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoem93ZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIGtvWydlcnJvcl9tc2cnXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXG5ceDFiWzE7OTdte1x4MWJbMTs5NW1ceGMzXHg5N1x4MWJbMTs5N219IFx4MWJbMTs5NW1DRUtQT0lOVCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBOYW1hICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzk1bScgKyBqWyduYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzk1bScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk1bVx4YzNceDk3XHgxYlsxOzk3bX0gUGFzc3dvcmQgIFx4MWJbMTs5MW0+IFx4MWJbMTs5NW0nICsgYm9zNQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlayA9IG9wZW4oJ2RvbmUvZm9sbG93LnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWsud3JpdGUoJ1xue1x4YzNceDk3fSBDRUtQT0lOVCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3M1ICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWsuY2xvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNla3BvaW50LmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3M2ID0galsnbGFzdF9uYW1lJ10ubG93ZXIoKSArICcxMjM0NScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gdXJsbGliLnVybG9wZW4oJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luP2FjY2Vzc190b2tlbj0yMzc3NTk5MDk1OTE2NTUlMjUyNTdDMGYxNDBhYWJlZGZiNjVhYzI3YTczOWVkMWEyMjYzYjEmZm9ybWF0PWpzb24mc2RrX3ZlcnNpb249MiZlbWFpbD0nICsgem93ZSArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBib3M2ICsgJyZzZGs9aW9zJmdlbmVyYXRlX3Nlc3Npb25fY29va2llcz0xJnNpZz0zZjU1NWY5OWZiNjFmY2Q3YWEwYzQ0ZjU4ZjUyMmVmNicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga28gPSBqc29uLmxvYWQoZGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBrbzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTJtQkVSSEFTSUwnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTJtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTJtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzkybScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5Mm1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTJtJyArIGJvczYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tlID0gb3BlbignZG9uZS9mb2xsb3cudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva2Uud3JpdGUoJ1xue1x4YzNceDk3fSBCRVJIQVNJTCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3M2ICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tlLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh6b3dlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIGtvWydlcnJvcl9tc2cnXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBceDFiWzE7OTVtQ0VLUE9JTlQnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5NW1ceGMzXHg5N1x4MWJbMTs5N219IE5hbWEgIFx4MWJbMTs5MW0gICAgPiBceDFiWzE7OTVtJyArIGpbJ25hbWUnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VyICBceDFiWzE7OTFtICAgID4gXHgxYlsxOzk1bScgKyB6b3dlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTdte1x4MWJbMTs5NW1ceGMzXHg5N1x4MWJbMTs5N219IFBhc3N3b3JkICBceDFiWzE7OTFtPiBceDFiWzE7OTVtJyArIGJvczYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VrID0gb3BlbignZG9uZS9mb2xsb3cudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWsud3JpdGUoJ1xue1x4YzNceDk3fSBDRUtQT0lOVCBcbntceGMzXHg5N30gTmFtYSAgICAgPiAnICsgalsnbmFtZSddICsgJ1xue1x4YzNceDk3fSBVc2VyICAgICA+ICcgKyB6b3dlICsgJ1xue1x4YzNceDk3fSBQYXNzd29yZCA+ICcgKyBib3M2ICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VrLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VrcG9pbnQuYXBwZW5kKHpvd2UpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBwYXNzCgogICAgcCA9IFRocmVhZFBvb2woMzApCiAgICBwLm1hcChtYWluLCBpZCkKICAgIHByaW50ICdcblx4MWJbMTs5NG1ceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODBceGUyXHg5NFx4ODAnCiAgICBwcmludCAnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhlMlx4OTdceDhmXHgxYlsxOzk3bX0gXHgxYlsxOzk1bVNlbGVzYWkgLi4uJwogICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk1bVx4ZTJceDk3XHg4Zlx4MWJbMTs5N219IFx4MWJbMTs5NW1Ub3RhbCBceDFiWzE7OTJtT0tceDFiWzE7OTdtL1x4MWJbMTs5NW1DUCBceDFiWzE7OTdtOiBceDFiWzE7OTJtJyArIHN0cihsZW4ob2tzKSkgKyAnXHgxYlsxOzk3bS9ceDFiWzE7OTVtJyArIHN0cihsZW4oY2VrcG9pbnQpKQogICAgcHJpbnQgJ1x4MWJbMTs5N217XHgxYlsxOzk1bVx4ZTJceDk3XHg4Zlx4MWJbMTs5N219IFx4MWJbMTs5Mm1PS1x4MWJbMTs5N20vXHgxYlsxOzk1bUNQIFx4MWJbMTs5NW1maWxlIHRlcnNpbXBhbiBceDFiWzE7OTFtOiBceDFiWzE7OTJtZG9uZS9mb2xsb3cudHh0JwogICAgcHJpbnQgNTAgKiAnXHgxYlsxOzk0bVx4ZTJceDk0XHg4MCcKICAgIHJhd19pbnB1dCgnXHgxYlsxOzk3bXs8XHgxYlsxOzk1bUtlbWJhbGlceDFiWzE7OTdtPn0nKQogICAgb3Muc3lzdGVtKCdweXRob24yIHlvc2hpLnB5JykKCgpkZWYgdXNlcl9pZCgpOgogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBwcmludCBsb2dvCiAgICBwcmludCA1MCAqICdceDFiWzE7OTRtXHhlMlx4OTRceDgwJwogICAgbGluZyA9ICdodHRwczovL3d3dy5mYWNlYm9vay5jb20vJwogICAgdXJsID0gbGluZyArIHJhd19pbnB1dCgnXHgxYlsxOzk3bXtceDFiWzE7OTVtXHhjM1x4OTdceDFiWzE7OTdtfSBVc2VybmFtZSA6ICcpCiAgICBpZHJlID0gcmUuY29tcGlsZSgnImVudGl0eV9pZCI6IihbMC05XSspIicpCiAgICBwYWdlID0gcmVxdWVzdHMuZ2V0KHVybCkKICAgIHByaW50IGlkcmUuZmluZGFsbChwYWdlLmNvbnRlbnQpCiAgICByYXdfaW5wdXQoJ1xuXHgxYlsxOzk1bVtceDFiWzE7OTdtPEtlbWJhbGk+XHgxYlsxOzk1bV0nKQogICAgbWVudSgpCgoKZGVmIHBlcmJhcnVpKCk6CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHByaW50IGxvZ28KICAgIHByaW50ICdceDFiWzE7OTRtXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwXHhlMlx4OTRceDgwJwogICAgamFsYW4oJ1x4MWJbMTs5Mm1NZW1wZXJiYXJ1aSBTY3JpcHQgLi4uXHgxYlsxOzkzbScpCiAgICBvcy5zeXN0ZW0oJ2dpdCBwdWxsIG9yaWdpbiBtYXN0ZXInKQogICAgcmF3X2lucHV0KCdcblx4MWJbMTs5NG17XHgxYlsxOzk3bTxLZW1iYWxpPlx4MWJbMTs5NG19JykKICAgIG9zLnN5c3RlbSgncHl0aG9uMiB5b3NoaS5weScpCgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIG1lbnUoKQogICAgbWFzdWsoKQo=")